<h1>Summary report for <%= @assignment.name %></h1>
<BR/>
<% if @scores[:teams] %>
    <a href="#" onClick="toggleAll(<%= @scores[:teams].length %>);return false;" id="teamAll" name="teamAll">Show all teams</a>
    <BR/><BR/>
<% end %>
<!-- If there are 1-member teams, the Teammate Review column should not appear in the score report.
If there is no metareviewing deadline, the “Reviewing” column should not appear in the score report.-->

<!-- E1877: charts implemented before table-->
<% if !@avg_of_avg.nan? %>
  <%= render :partial => 'team_charts', :locals => {:prefix => nil} %>
<% end %>
<table id="report_Table" class="table tablesorter table-striped grades" width="100%">
  <!--ACS Render the appropriate partial for displaying the scores depending on the team size -->
<% if @assignment.team_assignment? && @scores[:teams].length > 0 %>
  <%= render :partial => 'teams' %>
<% else %>
  <tr><td>No teams are defined for this assignment</td></tr>
<% end %>
</table>
<BR/><BR/>
<%= link_to 'Export '+'Grades',
            :controller=>'export_file',
            :action=>'start',
            :model=>'Assignment',
            :id=>@assignment.id %> <BR/><BR/>
<a href="javascript:window.history.back()">Back</a>

<!--E1877: table sorter script added to sort the table-->
<script>
    $(function () {
        // E1877: Function for sorting the table */
        $("#report_Table").tablesorter({
           // E1877: sortList: [[1, 0]], sort First Column by default when page loads
            textSorter: {
                3: function (value1, value2) {
                    //E1877: splitting by % and comparisons of values
                    var result1 = value1.split("%");
                    var result2 = value2.split("%");
                    if (parseInt(result1[0]) > parseInt(result2[0])) {
                        return 1;
                    }
                    else if (parseInt(result1[0]) < parseInt(result2[0])) {
                        return -1;
                    }
                    else {
                        return 0;
                    }
                }
            },
            headers: {
                2: {
                    //E1877: custom Parser to parse Metrics data for the custom parser
                    sorter: 'averageParser'
                }
            }
        });
    });

    //E1877: customParser for sorting by average
    $.tablesorter.addParser({
        id: "averageParser",
        is: function (stringValue) {
            return false;
        },
        format: function (stringValue) {
            //E1877: split the data by %
            var stringNumericPart = stringValue.split("%");
            //E1877: extract the numeric data
            var numericValue = parseFloat(stringNumericPart[0], 10);
            return numericValue;
        },
        type: 'numeric'
    });

</script>
