<script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" rel="stylesheet" type="text/css" />
<style type="text/css">
  body, html, input {
    font-family: sans-serif;
    font-size: 12pt;
  }

  #visualization {
    position: relative;
  }

  .menu {
    position: absolute;
    top: 0;
    right: 0;
    margin: 10px;
    z-index: 9999;
  }
  .vis-timeline {
    border: 2px solid purple;
  //font-family:  purisa, 'comic sans', cursive;
  //font-size: 12pt;
    background: #ffecea;
  }

  .vis-item {
    border-color: #F991A3;
    background-color: cornsilk;
  //font-size: 15pt;
    color: purple;
    box-shadow: 5px 5px 20px rgba(128,128,128, 0.5);
  }

  .vis-item,
  .vis-item.vis-line {
    border-width: 3px;
  }

  .vis-item.vis-dot {
    border-width: 10px;
    border-radius: 10px;
  }

  .vis-item.vis-selected, .vis-item.fileUpload.vis-selected, .vis-item.hyperlinkUpload.vis-selected, .vis-item.reviewDue.vis-selected, .vis-item.submissionDue.vis-selected, .vis-item.feedback.vis-selected, .vis-item.review.vis-selected, .vis-item.selfReview.vis-selected, .vis-item.teamReview.vis-selected  {
    border-color: black;
    background-color: white;
    color : black;
    font-size: 12pt;
  }

  .vis-time-axis .vis-text {
    color: purple;
    padding-top: 10px;
    padding-left: 10px;
  }

  .vis-time-axis .vis-text.vis-major {
    font-weight: bold;
  }

  .vis-time-axis .vis-grid.vis-minor {
    border-width: 2px;
    border-color: pink;
  }

  .vis-time-axis .vis-grid.vis-major {
    border-width: 2px;
    border-color: #F991A3;
  }
  .vis-item.hyperlinkUpload,.vis-item.fileUpload  {
    background-color: springgreen;
    border-color: green;
  }
  .vis-item.submissionDue,.vis-item.reviewDue {
    background-color: lightsalmon;
    border-color: brown;
  }
  .vis-item.feedback,.vis-item.review,.vis-item.selfReview,.vis-item.teamReview {
    background-color: cornsilk;
    border-color: indianred;
  }
</style>

<h1>
  <% if @assignment.spec_location == nil|| @assignment.spec_location.length==0%>
      Submit or Review work for <%= @assignment.name %>
  <% else %>
      Submit or Review work for <%= link_to @assignment.name, @assignment.spec_location %>
  <% end %>

</h1>

<div class="flash_note">
  Next: Click the activity you wish to perform on the assignment titled: <%= @assignment.name %>
</div>
<% if @assignment.spec_location && @assignment.spec_location.length > 0 %>
    <a href="<%= @assignment.spec_location %>" target="new">Assignment Description</a>
<% end %>
<ul>
  <%if @topics.size > 0 %>
      <% if @authorization == 'participant' || @authorization == 'submitter' %>
          <li>
            <%= link_to 'Signup sheet', :controller=>'sign_up_sheet', :action => 'list', :id => @participant.id%>
            (Sign up for a topic)
          </li>
      <% end %>
  <%end%>
  <!--ACS Here we need to know the size of the team to decide whether or not
  to display the label "Your team" in the student assignment tasks-->
  <%if @assignment.max_team_size > 1 %>
      <% if @authorization == 'participant' %>
          <li>
            <%= link_to 'Your team', view_student_teams_path(student_id: @participant.id) %>
            (View and manage your team)
          </li>
      <% end %>
  <%end%>
  <% if @authorization == 'participant' or @can_submit == true %>
      <li>
        <!--if one team do not hold a topic (still in waitlist), they cannot submit their work.-->
        <% if @topic_id.nil? and @topics.size > 0 %>
            <font color="gray">Your work</font> (You have to choose a topic first)
        <% else %>
            <% if @assignment.submission_allowed(@topic_id) %>
                <%= link_to 'Your work', :controller => 'submitted_content', :action => 'edit', :id => @participant.id %> (Submit and view your work)
            <% else %>
                <%= link_to 'Your work', :controller => 'submitted_content', :action => 'view', :id => @participant.id %> (Submit and view your work)
            <% end %>
        <% end %>
      </li>
  <% end %>

  <% if @authorization == 'participant' or @can_review == true %>
      <li>
        <!--alias_name means if one participant is a reader, it will show 'Your readings' to see others' work; if one participant is not a reader, it will show 'Others' work' on the screen.-->
        <% if @authorization != 'reader' %>
            <% @alias_name = "Others' work" %>
        <% else %>
            <% @alias_name = "Your readings" %>
        <% end %>
        <!--Zhewei: professor mentioned that a submission is reviewable if the submission is in a stage where reviews can be done. It does not depend on the stage of the topic the reviewer is writing on-->
        <% if check_reviewable_topics(@assignment) or @assignment.metareview_allowed(nil) or @assignment.get_current_stage(@topic_id) == "Finished" %>
            <%= link_to "#{@alias_name}",{:controller => 'student_review', :action => 'list', :id => @participant.id} %>
        <% else %>
            <font color="gray"><%= @alias_name%></font>
        <% end %>
        (Give feedback to others on their work)
      </li>
  <% end %>

  <!--Quiz-->
  <%if @assignment.require_quiz%>
      <% if @authorization == 'participant' or @can_take_quiz == true %>
          <li>
            <% if @assignment.require_quiz and (@assignment.quiz_allowed(@topic_id) or @assignment.get_current_stage(@topic_id) == "Finished") %>
                <%= link_to "Take quizzes", student_quizzes_path(:id => @participant.id) %>
            <% else %>
                <font color="gray">Take quizzes</font>
            <% end %>
            (Take quizzes over the work you have read)
          </li>
      <% end %>
  <%end%>

  <% if @team && (@authorization == 'participant' or @can_submit == true) %>
      <li>
        <!--Only if the assignment supports self-review and students submitted self-review can he or she view scores.-->
        <% if @assignment.is_selfreview_enabled and unsubmitted_self_review?(@participant.id) %>
            <font color="gray">Your scores</font> (You have to submit self-review under 'Your work' before checking 'Your scores'.)
        <% else %>
            <%= link_to "Your scores", controller: 'grades', action: 'view_team', id: @participant.id %>
            (View feedback on your work)  &nbsp;  <%= link_to "Alternate View",  controller: 'grades', action: 'view_my_scores', id: @participant.id %>
        <% end %>
      </li>
  <% end %>
  <%if @can_provide_suggestions == true %>
      <li><%= link_to "Suggest a topic",{:controller => 'suggestion', :action => 'new', :id => @assignment.id} %></li>
  <% end %>

  <% if @assignment.get_current_stage(@topic_id) == "Complete" %>
      <!-- removed code for survey assignment add in line above && SurveyHelper::is_user_eligible_for_survey?	(@assignment.id, session[:user].id)  -->
      <li><%= link_to "Take a survey",{:controller => 'survey_response', :action => 'begin_survey', :id => @assignment.id} %> (This will log you out)</li>
  <% end %>
  <li><%= link_to "Change your handle", {:controller => 'participants', :action => 'change_handle', :id => @participant.id} %> (Provide a different handle for this assignment)</li>
</ul>
<br>

<div id="visualization">
  <div class="menu">
    <input id="zoomIn" value="Zoom in" type="button">
    <input id="zoomOut" value="Zoom out" type="button">
    <input id="moveLeft" value="Move left" type="button">
    <input id="moveRight" value="Move right" type="button">
    <input id="Recenter" value="Recenter" type="button">
  </div>
</div>

<% current_folder = DisplayOption.new %>
<% current_folder.name = "" %>

<% @href_arr= Array.new %>
<!-- @href_arr is used to store all the hyperlinks for each visualized object -->
<% @duedates = DueDate.where("parent_id = #{@assignment.id}")
   @visualization_data = @duedates.map do |due|
     @href_arr.push(""); #empty hyperlink as we do not provide hyperlinks for submissions/reviews
     if due.deadline_type_id.eql? 1
       { :id => due.id, :start=> due.due_at, :className => "submissionDue", :content => "Round "+(due.round.to_s)+"<split>Submission due by "+'<br>'+due.due_at.strftime("%m/%d/%Y at %I:%M %p") }
     else
       { :id => due.id, :start=> due.due_at, :className => "reviewDue", :content => "Round "+(due.round.to_s)+"<split>Review due by "+'<br>'+due.due_at.strftime("%m/%d/%Y at %I:%M %p") }
     end
   end
%>

<!-- display only if submissions are made-->
<% unless @team.nil?
     @submissions = SubmissionRecord.find_by_sql"select * from  submission_records where assignment_id=#{@assignment.id} and team_id=#{@team.id} and content NOT IN (select content from submission_records where assignment_id=#{@assignment.id} and team_id=#{@team.id} and UPPER(operation) Like 'REMOVE%')"

     @visualization_data += @submissions.map do |submission|
       #display_directory_tree(participant, files, true).html_safe
       if (submission.operation).eql?('Submit File')
         file = submission.content
         ret=""
         if File.exist?(file) && File.directory?(file)
           ret += link_to File.basename(file), :controller => 'submitted_content', :action => 'edit', :id => participant.id, "current_folder[name]" => file
         else
           ret += "\n      "
           ret += link_to File.basename(file), :controller => 'submitted_content',
                          :action => 'download',
                          :id => @participant.id,
                          :download => File.basename(file),
                          "current_folder[name]" => File.dirname(file)
         end
         @href_arr.push(ret.split('"')[1])
         #only file name instead of entire relative path need to be displayed on timeline. Hence we push the same in content, appending created time to it
         { :id => submission.id, :start=> submission.created_at, :className=> "fileUpload", :content => (submission.content).split('/')[-1]+'<split>'+submission.created_at.strftime("%m/%d/%Y at %I:%M %p") }
       else
         @href_arr.push(submission.content)
         { :id => submission.id, :start=> submission.created_at, :className=> "hyperlinkUpload" ,:content => submission.content+'<split>'+submission.created_at.strftime("%m/%d/%Y at %I:%M %p") }
       end
     end

   end %>

<!-- Reviews not yet started -->
<% unless @review_mappings.nil?
     @review_mappings.each do |review_mapping_iterator|
       @response_values = Response.where(:map_id => review_mapping_iterator.id)
       @visualization_data += @response_values.map do |response_value_iterator|
         if review_mapping_iterator.type=="ReviewResponseMap"
           review_mapping = ResponseMap.find(review_mapping_iterator.reviewed_object_id)
           participant = AssignmentTeam.get_first_member(review_mapping_iterator.reviewee_id)
           topic_id = SignedUpTeam.topic_id(participant.parent_id, participant.user_id)
           if !topic_id.nil?
             if SignUpTopic.find(topic_id).topic_identifier != ''
               @topic_name=SignUpTopic.find(topic_id).topic_identifier+": "+SignUpTopic.find(topic_id).topic_name
             else
               @topic_name=SignUpTopic.find(topic_id).topic_name
             end
           end
           unless response_value_iterator.nil? and response_value_iterator.is_submitted.zero?
             @href_arr.push("../response/view?id="+response_value_iterator.id.to_s)
             puts @topic_name
             @topic_name="#{@topic_name}".gsub("'", %q()) #look for single quotes in topic names and remove them as they will interfere with JS parser
             puts @topic_name
             { :id => response_value_iterator.id, :start=> response_value_iterator.created_at, :className => "review", :content => "Peer Review - Round "+response_value_iterator.round.to_s+"<split> Review for: #{@topic_name}"+'<br>'+response_value_iterator.created_at.strftime("%m/%d/%Y at %I:%M %p") }
           end
         elsif review_mapping_iterator.type=="SelfReviewResponseMap"
           unless response_value_iterator.nil? and response_value_iterator.is_submitted.zero?
             @href_arr.push("../response/view?id="+response_value_iterator.id.to_s)
             { :id => response_value_iterator.id, :start=> response_value_iterator.created_at, :className => "selfReview", :content => "Self Review - Round "+response_value_iterator.round.to_s+"<split>Self Review"+'<br>'+response_value_iterator.created_at.strftime("%m/%d/%Y at %I:%M %p") }
           end
         elsif review_mapping_iterator.type=="TeammateReviewResponseMap"
           unless response_value_iterator.nil? and response_value_iterator.is_submitted.zero?
             reviewee = ResponseMap.where(:reviewer_id => "#{review_mapping_iterator.reviewer_id}", :id =>"#{review_mapping_iterator.id}").pluck(:reviewee_id)
             puts reviewee.to_s+" "+review_mapping_iterator.reviewer_id.to_s+" "+review_mapping_iterator.id.to_s
             user_id = Participant.where(:id=> "#{reviewee[0]}").pluck(:user_id)
             reviewee_name = User.where(:id=>"#{user_id[0]}").pluck(:name)
             @href_arr.push("../response/view?id="+response_value_iterator.id.to_s)
             { :id => response_value_iterator.id, :start=> response_value_iterator.created_at, :className => "teamReview", :content => "Team Review - Round "+response_value_iterator.round.to_s+"<split>Team review for #{reviewee_name[0]}"+'<br>'+response_value_iterator.created_at.strftime("%m/%d/%Y at %I:%M %p") }
           end
         else
           unless response_value_iterator.nil? and response_value_iterator.is_submitted.zero?
             @href_arr.push("../response/view?id="+response_value_iterator.id.to_s)
             { :id => response_value_iterator.id, :start=> response_value_iterator.created_at, :className => "feedback", :content => "Feedback - Round "+response_value_iterator.round.to_s+"<split>Feedback"+'<br>'+response_value_iterator.created_at.strftime("%m/%d/%Y at %I:%M %p") }
           end
         end
       end
     end
   end %>

<script>
    // converting @visualization_data array to javascript compatible JSON object
    var visualization_JSON = JSON.parse('<%=raw  @visualization_data.to_json%>');
    var href_JSON = JSON.parse('<%= @href_arr.to_json.html_safe%>')

    var temp;
    //temp is temporary variable used to generate hyperlinks from content
    for(i=0;  i<visualization_JSON.length; i++) {
        temp=visualization_JSON[i].content.split("<split>");
        if(href_JSON[i]=='')
            visualization_JSON[i].content = temp[0]+"<br>"+temp.slice(1); //if no hyperlink is present display plain text
        else
            visualization_JSON[i].content = "<a href="+href_JSON[i]+" target='_blank'><b><u>"+temp[0]+"</u></b></a><br>"+temp.slice(1);
        // generating hyperlink only to relevant text only
    }
</script>
<!--code for visualization-->
<script type="text/javascript">
    // DOM element where the Timeline will be attached
    var container = document.getElementById('visualization');

    // Create a DataSet (allows two way data-binding)
    var items = new vis.DataSet(visualization_JSON);

    // Configuration for the Timeline
    var options = {
        zoomMin: 1000 * 60 * 60 * 24,             // one day in milliseconds
        zoomMax: 1000 * 60 * 60 * 24 * 31 * 12     // about one year in milliseconds
    };

    // Create a Timeline
    var timeline = new vis.Timeline(container, items, options);
</script>

<script>
    var visualization_window=timeline.range.getRange();
    function move (percentage) {
        var range = timeline.getWindow();
        var interval = range.end - range.start;

        timeline.setWindow({
            start: range.start.valueOf() - interval * percentage,
            end:   range.end.valueOf()   - interval * percentage
        });
    }

    // attach events to the navigation buttons
    // zoom percentage in zoomin/zoomout can be adjusted below by passing paramenter. Similar is the case for move left/right
    document.getElementById('zoomIn').onclick    = function () { timeline.zoomIn( 0.2); };
    document.getElementById('zoomOut').onclick   = function () { timeline.zoomOut( 0.2); };
    document.getElementById('moveLeft').onclick  = function () { move( 0.2); };
    document.getElementById('moveRight').onclick = function () { move(-0.2); };
    document.getElementById('Recenter').onclick  = function () {
        var visualization_window_start = new Date(visualization_window.start);
        var visualization_window_end = new Date(visualization_window.end);
        timeline.setWindow(visualization_window_start, visualization_window_end, { animation: true });
    };
</script>

<br>
<br>
<a href="javascript:window.history.back()">Back</a>
