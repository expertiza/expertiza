<style>
  @media only screen and (max-width : 540px)
  {
    .chat-sidebar
    {
      display: none !important;
    }

    .chat-popup
    {
      display: none !important;
    }
  }

  body
  {
    background-color: #e9eaed;
  }
  .hidden {
    display: none;
  }

  .chat-sidebar
  {
    width: 200px;
    position: fixed;
    height: 100%;
    right: 0px;
    top: 0px;
    padding-top: 10px;
    padding-bottom: 10px;
    border: 1px solid rgba(29, 49, 91, .3);
  }

  .sidebar-name
  {
    padding-left: 10px;
    padding-right: 10px;
    margin-bottom: 4px;
    font-size: 12px;
  }

  .sidebar-name span
  {
    padding-left: 5px;
  }

  .sidebar-name a
  {
    display: block;
    height: 100%;
    text-decoration: none;
    color: inherit;
  }

  .sidebar-name:hover
  {
    background-color:#e1e2e5;
  }

  .sidebar-name img
  {
    width: 32px;
    height: 32px;
    vertical-align:middle;
  }

  .popup-box
  {
    display: none;
    position: fixed;
    bottom: 0px;
    right: 220px;
    height: 285px;
    background-color: rgb(237, 239, 244);
    width: 300px;
    border: 1px solid rgba(29, 49, 91, .3);
  }

  .popup-box .popup-head
  {
    background-color: #6d84b4;
    padding: 5px;
    color: white;
    font-weight: bold;
    font-size: 14px;
    clear: both;
  }

  .popup-box .popup-head .popup-head-left
  {
    float: left;
  }


  .popup-box .popup-head .popup-head-right
  {
    float: right;
    opacity: 0.5;
  }

  .popup-box .popup-head .popup-head-right a
  {
    text-decoration: none;
    color: inherit;
  }

  .popup-box .popup-messages
  {
    height: 100%;
    overflow-y: scroll;
  }
  .popup-box .popup-messages .popup-bottom{
    position: absolute;
    bottom: 0;
  }



</style>

<script>
  //this function can remove a array element.
  Array.remove = function(array, from, to) {
    var rest = array.slice((to || from) + 1 || array.length);
    array.length = from < 0 ? array.length + from : from;
    return array.push.apply(array, rest);
  };

  //this variable represents the total number of popups can be displayed according to the viewport width
  var total_popups = 0;

  //arrays of popups ids
  var popups = [];

  //this is used to close a popup
  function close_popup(id)
  {
    for(var iii = 0; iii < popups.length; iii++)
    {
      if(id == popups[iii])
      {
        Array.remove(popups, iii);

        document.getElementById(id).style.display = "none";

        calculate_popups();

        return;
      }
    }
  }

  //displays the popups. Displays based on the maximum number of popups that can be displayed on the current viewport width
  function display_popups()
  {
    var right = 220;

    var iii = 0;
    for(iii; iii < total_popups; iii++)
    {
      if(popups[iii] != undefined)
      {
        var element = document.getElementById(popups[iii]);
        element.style.right = right + "px";
        right = right + 320;
        element.style.display = "block";
      }
    }

    for(var jjj = iii; jjj < popups.length; jjj++)
    {
      var element = document.getElementById(popups[jjj]);
      element.style.display = "none";
    }
  }

  //creates markup for a new popup. Adds the id to popups array.
  function register_popup(id, name)
  {

    for(var iii = 0; iii < popups.length; iii++)
    {
      //already registered. Bring it to front.
      if(id == popups[iii])
      {
        Array.remove(popups, iii);

        popups.unshift(id);

        calculate_popups();


        return;
      }
    }

    var element = '<div class="popup-box chat-popup" id="'+ id +'">';
    element = element + '<div class="popup-head">';
    element = element + '<div class="popup-head-left">'+ name +'</div>';
    element = element + '<div class="popup-head-right"><a href="javascript:close_popup(\''+ id +'\');">&#10005;</a></div>';
    element = element + '<div style="clear: both"></div></div><div class="popup-messages" id="'+ id +"messages"+'">'+ +'</div></div>';
    $( "body" ).append( element);
    document.getElementById(id+"messages").appendChild(document.getElementById(id+"partial"))







    popups.unshift(id);

    calculate_popups();

  }

  //calculate the total number of popups suitable and then populate the toatal_popups variable.
  function calculate_popups()
  {
    var width = window.innerWidth;
    if(width < 540)
    {
      total_popups = 0;
    }
    else
    {
      width = width - 200;
      //320 is width of a single popup box
      total_popups = parseInt(width/320);
    }

    display_popups();

  }

  //recalculate when window is loaded and also when window is resized.
  window.addEventListener("resize", calculate_popups);
  window.addEventListener("load", calculate_popups);

</script>
<table>
  <% review_no = 1 %>
  <% mappings.each do |map| %>
      <%@sorted_responses=[]%>
      <%- # ACS Have metareviews done for all teams   -%>
      <%- # removed code that handles team and individual assignments differently   -%>
      <% if map.type.to_s == "MetareviewResponseMap" %>
          <% review_mapping = ResponseMap.find(map.reviewed_object_id) %>
          <% participant = AssignmentTeam.get_first_member(review_mapping.reviewee_id) %>
      <% else %>
          <% participant = AssignmentTeam.get_first_member(map.reviewee_id) %>
      <% end %>

      <% if participant %>
          <% topic_id = SignedUpTeam.topic_id(participant.parent_id, participant.user_id) %>
          <tr>
            <td>
              <b><%= "#{title} #{review_no}." %></b>
              <!--In ‘student_review/list’ page, if the topic_identifier is empty, ‘:’ sign should not be displayed.-->
              <% if !topic_id.nil? %>
                  <% if SignUpTopic.find(topic_id).topic_identifier != '' %>
                      <%= " #{SignUpTopic.find(topic_id).topic_identifier}: #{SignUpTopic.find(topic_id).topic_name}" %>
                  <% else %>
                      <%= " #{SignUpTopic.find(topic_id).topic_name}" %>
                  <% end %>
              <% end %>
            </td>

            <td>&nbsp;</td>
            <% if !map.response.empty? %>
                <% array_not_empty = 0 %>
                <% @sorted_responses = Array.new %>
                <% @prev = Response.where(:map_id => map.id) %>
                <% for element in @prev %>
                    <% array_not_empty = 1 %>
                    <% @sorted_responses << element %>
                <% end %>

                <% if (array_not_empty == 1) %>
                    <% @sorted_responses = @sorted_responses.sort_by {|obj| obj.updated_at} # the latest should be at the last%>
                    <% @latest_response = @sorted_responses.last %>

                    <%if @latest_response.round.nil?%>
                      <% last_response_round = AssignmentDueDate.done_in_assignment_round(@assignment.id,@latest_response) %>
                    <%else%>
                      <% last_response_round = @latest_response.round %>
                    <%end%>

                    <% current_round = @assignment.number_of_current_round(topic_id) %>

                    <td>
                       <%= link_to "View", {:controller => 'response', :action => 'view', :id => @latest_response.id} %>
                    </td>

                    <td>
                      <div id="messages" class="hidden">
                            <div id="<%= "#{title} #{review_no}." %>partial"  >
                              <%= sync partial: "message_row", collection: Message.by_chat(map.chat) %>
                              <%= sync_new partial: "message_row", resource: Message.new, scope: Message.by_chat(map.chat) %>
                              <div class="popup-bottom">
                                <%= form_for([map.chat, map.chat.messages.build] , remote: true) do |f| %>
                                    <%= f.text_field :body , :id => "body_input"%>
                                <% end %>
                              </div>
                            </div>

                      </div>

                      <a href="javascript:register_popup('<%= "#{title} #{review_no}." %>', '<%= "#{title} #{review_no}." %>' );">
                        <span>chat</span>
                      </a>
                    </td>

                    <% if @assignment.get_current_stage(topic_id) != "Finished" %>
                      <%- # show the link as edit when latest review is done in current deadline   -%>
                      <%- # show link as update when latest review is done in different deadline than current phase   -%>
                      <% if (last_response_round == current_round)%>
                        <td>
                          <% if (!@latest_response.is_submitted) %>
                              <%= link_to "Edit", {:controller => 'response', :action => 'edit', :id => @latest_response.id} %>
                          <%end%>
                        </td>
                      <% else %>
                        <td><%= link_to "Update", {:controller => 'response', :action => 'new', :id => map.map_id} %></td>
                      <% end %>
                    <% end %>
                <%end%>
            <% elsif @assignment.get_current_stage(topic_id) != "Complete" && @assignment.can_review(topic_id) %>
                <td><%= link_to "Begin", {:controller => 'response', :action => 'new', :id => map.id} %></td>
                <td>&nbsp;&nbsp;</td>
            <% else %>
                <td>Begin</td>
                <td> (Work has not yet been submitted) for
                <% review_no += 1 %></td>
            <% end %>
            <% review_no+=1 %>

            <!--[zhewei, 1/20/2016]: show calibration results-->
            <% calibration_response_map = ReviewResponseMap.where(["reviewed_object_id = ? and reviewee_id = ? and calibrate_to = ?", @assignment.id, map.reviewee_id, 1]).first rescue nil %>
            <% if @assignment.is_calibrated == true and !calibration_response_map.nil? and !calibration_response_map.response.nil? and !map.response.empty? and map.response[0].is_submitted == true %>
              <td>&nbsp;&nbsp;</td>
              <td><%= link_to "Show calibration results", {controller: 'response', action: 'show_calibration_results_for_student', calibration_response_map_id: calibration_response_map.id, review_response_map_id: map.id} %></td>
            <% end %>
          </tr>
      <% end %>

     <% if map.type.to_s != "MetareviewResponseMap" %>
       <% if @sorted_responses !=nil %>
         <table class="grades" style=" font-style: italic; margin-left: 90px;">
         <% if (@sorted_responses.size > 1) %>
           <%@sorted_responses = @sorted_responses.reverse%>
           <% for i in 1..@sorted_responses.size-1 %>
             <tr>
               <td colspan="10"><%= link_to "Review done at --#{@sorted_responses[i].created_at}", {:controller => 'response', :action => 'view', :id => @sorted_responses[i].id} %></td>
             </tr>
           <% end %>
         <% else %>
           <tr>
             <td> <font color="gray" style="font-style: italic;">No previous versions available</font></td>
           </tr>
         <% end %>
         </table>
       <% end %>
     <% end %>
  <% end %>
</table>
