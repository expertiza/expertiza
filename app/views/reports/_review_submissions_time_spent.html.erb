<% def get_link_round_review_time_all_links(map_id, round,only_expertiza_time=false) %>
  <% sum_time = 0 %>

  <%if only_expertiza_time%>
    <% links = SubmissionViewingEvent.where(map_id: map_id, round: round, link: 'Expertiza Review') %>
  <%else%>
    <% links = SubmissionViewingEvent.where(map_id: map_id, round: round).where.not(link: 'Expertiza Review') %>
  <%end%>

  <% links_to_remove = [] %>
  <% links.each do |link_outer| %> <!-- identify which links to remove from analysis -->
    <% start_time = link_outer.start_at %>
    <% end_time = link_outer.end_at %>
    <!-- now, iterate over all other links -->
    <% links.each do |link_inner| %>
      <% if link_inner == link_outer %>
        <% next %> <!-- continue statement -->
      <% end %>
      <% if link_inner.start_at >= link_outer.start_at && link_inner.end_at <= link_outer.end_at %>
        <% unless links_to_remove.include?(link_inner) %> <!-- don't add link if its already in the array -->
          <% links_to_remove << link_inner %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
  <% links_to_remove.each do |link_to_remove| %> <!-- remove superfluous links from analysis -->
    <% links.delete(link_to_remove) %>
  <% end %>

  <% link_edges_array = [] %>
  <% links.each do |each_link| %> <!-- create array of link "edges" and sort by time -->
    <% link_edges_array << {"link"=>each_link.link, "edge_type"=>"start", "time"=>each_link.start_at} %>
    <% link_edges_array << {"link"=>each_link.link, "edge_type"=>"end", "time"=>each_link.end_at} %>
  <% end %>
  <% sorted_link_edges_array = link_edges_array.sort_by{ |k| k["time"] } %>

  <!--
    go through each edge and construct durations. Add durations to create total time.
    to ensure "dead time" between edges aren't counted, make sure that if an "end" edge time is
    recorded,the next edge is a "start" edge, and there are no "open" start edges, then do not
    record that "dead" duration
  -->
  <% sum_time = 0 %>
  <% open_start_edges = 0 %>
  <% sorted_link_edges_array.each_with_index  do |current_edge, index| %>
    <% sorted_link_edges_array.drop(index+1).each do |further_edge| %>
      <% if current_edge["edge_type"]=="start" %>
        <% open_start_edges +=1 %>
      <% elsif current_edge["edge_type"]=="end" %>
        <% open_start_edges -=1 %>
      <% end %>
      <% if current_edge["edge_type"]=="end" && further_edge["edge_type"]=="start" %>
        <% if open_start_edges == 0 %>
          <% break %>
        <% end %>
      <% end %>
      <% sum_time += (further_edge["time"] - current_edge["time"]) %>
      <% break %>
    <% end %>
  <% end %>
  <% sum_time %>
<% end %>
<div id="submissionviewingevent">
  <% reviewee_list = Array.new %>
  <% total_time_list = Array.new %>
  <!--% timeHash = Hash.new %-->
  <div class="modal fade" id="chartModal" role="dialog">
    <div class="modal-dialog">
      <!-- Modal content-->
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal">&times;</button>
          <h4 class="modal-title" align="center">Time Distribution of Review</h4>
        </div>
        <div class="modal-body">
          <div id="chartContainer" style="height: 360px; width: 100%;"></div>
          <div id="table" align="center">
            <table><!--table to expertiza, link, and response object time-->
              <tbody>
              <tr>
                <td>Active Time - Expertiza</td>
                <td id="expertiza"></td>
              </tr>
              <tr>
                <td>Active Time - Other Links</td>
                <td id="links"></td>
              </tr>
              <tr>
                <td>Total duration of Review</td>
                <td id="total_object_time"></td>
              </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
  <% @response_maps = ResponseMap.where(reviewer_id: id, reviewed_object_id: @id, reviewee_id: reviewee_id)  %><!-- all responses for current reviewee-->
  <% @number_of_rounds = Assignment.find(@id).rounds_of_reviews %>
  <% reviewee_count = 0 %>
  <% @response_maps.each do |map| %>  <!-- for reviewee-->
    <!--% map_total_time = 0 %-->
    <% total_time = 0 %>
    <% (1..@number_of_rounds).each do |each_round| %>  <!-- for rounds-->
      <%link_total_time  = get_link_round_review_time_all_links(map.id,each_round)%>
      <%expertiza_total_time = get_link_round_review_time_all_links(map.id,each_round, true)%>
      <%total_time = link_total_time + expertiza_total_time%>
      <%response_object = Response.find_by(map_id: map.id, round: each_round)%>
      <%object_start_time=0%>
      <%object_end_time=0%>
      <%total_object_time=0%>
      <%if !response_object.nil?%><!--calculate response object time only if it exists else it will be displayed as No submission-->
        <%object_start_time = response_object.created_at%>
        <%object_end_time = response_object.updated_at%>
        <%total_object_time = (object_end_time - object_start_time).to_i%>
      <%end%>
      <% @per_round_time = Array.new %>
      <% @reviewed_object_id = map.reviewed_object_id %>
      <% @reviewee_id = map.reviewee_id %>
      <% each_link_detail = Array.new %>
      <% each_link_detail << 'Expertiza Review' %>
      <% each_link_detail << expertiza_total_time %>
      <% @per_round_time << each_link_detail %>
      <% each_link_detail = Array.new %>
      <% each_link_detail << 'Other Links' %>
      <% each_link_detail << link_total_time %>
      <% @per_round_time << each_link_detail %>
      <% each_link_detail = Array.new %>
      <% each_link_detail << 'Total Object Time' %>
      <% each_link_detail << total_object_time %>
      <% @per_round_time << each_link_detail %>
      <% timeHash[(@reviewee_id.to_s).concat(each_round.to_s)] = @per_round_time %>

      <% if total_time > 0 %><!--display time in readable format - h m s depending on how much time was spent-->
        <%seconds = total_time % 60%>
        <%minutes = (total_time / 60) % 60%>
        <%hours = total_time / (60 * 60)%>
        <span title="Review <%=each_round%>">
              <a onclick="drawChart(<%= @reviewee_id.to_s %>,<%= each_round.to_s %>)" data-toggle="modal" data-target="#chartModal"%>
                <% if hours.to_i>0 %>
                  <%=format("%02d h %02d m %02d s", hours, minutes, seconds)%>
                <% elsif minutes.to_i>0 %>
                  <%=format("%02d m %02d s", minutes, seconds)%>
                <% else %>
                  <%=format("%02d s", seconds)%>
                <% end %>
              </a>
            </span>
      <% else %>
            <span title="No review available for this round">
              ---
            </span>
      <% end %>
      <%= ', ' unless each_round == @number_of_rounds %>
    <% end %>    <!-- end for round-->
    <% reviewee_list << @reviewee_id %>
    <% total_time_list << total_time.round(2) %>
    <% reviewee_count = reviewee_count+1%>
  <% end %>  <!-- end for reviewee-->
</div>
<!--- Script to update the total time column after the page load-->
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/canvasjs/1.7.0/canvasjs.js"> </script>     <!-- Canvas JS CDN -->
<script type="text/javascript">
    var timeReportHash;
    $(document).ready(function () {
        timeReportHash = <%= timeHash.to_json.to_s.html_safe %>;
        totalTimeList = <%= total_time_list%>;
        for(each=0;each<totalTimeList.length;each++){
            $("#submissionviewingevent table #"+each).html(totalTimeList[each]);
        }
    });
    //function to parse time(in  seconds) to readable format
    function calculateTime(time){
        var seconds = time % 60;
        var minutes = (time / 60) % 60;
        var hours = (time / (60*60)) % 24;
        var days = time / (60*60*24);
        var final_time = 0;
        if(parseInt(days)>0){
            final_time = Math.floor(days).toString().concat(' d ').concat(Math.floor(hours).toString().concat(' h ')).concat(Math.floor(minutes).toString().concat(' m ')).concat(Math.floor(seconds).toString().concat(' s'))}
        else if (parseInt(hours) > 0) {
            final_time = Math.floor(hours).toString().concat(' h ').concat(Math.floor(minutes).toString().concat(' m ')).concat(Math.floor(seconds).toString().concat(' s'))}
        else if (parseInt(minutes) > 0) {
            final_time = Math.floor(minutes).toString().concat(' m ').concat(Math.floor(seconds).toString()).concat(' s');}
        else {
            final_time = seconds.toString().concat(' s')}
        return final_time;
    }
    function drawChart(reviewee_id,round){
        var allLinks = timeReportHash[(reviewee_id.toString()).concat(round.toString())];
        var dataArray=[];  // Data to be passed to chart
        var sum_time = 0.0;
        for(i=0;i<allLinks.length-1;i++){
            var dataPoint={}
            dataPoint["y"] = allLinks[i][1];
            var link_name = allLinks[i][0];
            dataPoint["label"] = link_name.slice(0,50)+(link_name.length>30? "...":"");
            dataArray.push(dataPoint);
        }
        document.getElementById('expertiza').innerHTML=calculateTime(allLinks[0][1]);
        document.getElementById('links').innerHTML=calculateTime(allLinks[1][1]);
        document.getElementById('total_object_time').innerHTML=calculateTime(allLinks[2][1]);

        var chart = new CanvasJS.Chart("chartContainer",
            {
                theme: "dark2", // "light1", "light2", "dark1", "dark2"
                exportEnabled: true,
                animationEnabled: true,
                data: [
                    {
                        type: "pie",
                        startAngle: 90,
                        //showInLegend: false,
                        //innerRadius: 60,
                        //legendText: "{label}",
                        //yValueFormatString: "##:##:##",
                        toolTipContent: "<b>{label}:</b> (#percent%)",
                        indexLabelFontSize: 17,
                        indexLabel: "{label} - #percent%",
                        dataPoints : dataArray
                    }
                ]
            });
        $('#chartModal').on('shown.bs.modal',function(){
            chart.render();
            $(".canvasjs-chart-credit").css("display","none");//To remove the water mark from the chart
        });
    }
</script>