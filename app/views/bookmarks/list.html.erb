<h1>Bookmarks list for <%= @topic.topic_name %></h1>

<style type="text/css">
  td
  {
    padding: 5px;
  }
</style>

<div class = "exp">
  <table>
    <tr>
      <th class="head">Title</th>
      <th class="head">Description</th>
      <th class="head">Avg. rating</th>
      <th class="head">Your rating</th>
      <th class="head">Badge</th>
      <th class="head">Review</th>
      <% if !Bookmark.where(user_id: session[:user].id).blank? %>
        <th class="head" colspan='2'>Action</th>
      <% end %>
    </tr>
    <% @bookmark_ids = Array.new %>
    <% @bookmarks.each {|bookmark| @bookmark_ids << bookmark.id} %>
    <% @bookmarks.each do |bookmark| %>
      <tr>
        <td><a href=<%= "http://#{bookmark.url}"%> target='_blank'><%=bookmark.title %></td>
        <!--Set maximum length of bookmark description and keep description in one line.-->
        <td><%=truncate(bookmark.description, length: 100) %></td>
        <!--Average rating score-->
        <% @bookmark_ratings = BookmarkRating.where(bookmark_id: bookmark.id) %>
        <!--Self rated bookmark should not be counted in average rating.-->
        <% @bookmark_ratings.to_a.reject! {|bookmark_rating| bookmark_rating.user_id == Bookmark.find(bookmark_rating.bookmark_id).user_id} %>
        <% sum = 0 %>
        <% @bookmark_ratings.each do |bookmark_rating| %>
          <% sum += bookmark_rating.rating %>
        <% end %>
        <td>
            <!-- total average rating used for 'Avg. rating' -->
            <% totalAvg = total_average_score(bookmark) %>
            <% if totalAvg != 0 %>
              <%= totalAvg %>
            <% else %>
              <%= '-' %>
            <% end %>
        </td>
        <td>
          <!--Users can't rate their own bookmarks.-->
          <% if session[:user].id != bookmark.user_id %>
            <% if BookmarkRating.exists?(bookmark_id: bookmark.id, user_id: session[:user].id) %>
              <% rating = BookmarkRating.where(bookmark_id: bookmark.id, user_id: session[:user].id).first.rating.to_s %>
            <% else %>
              <% rating = "0" %>
            <% end %>
            <!--If instructor choose to use dropdown, Expertiza will not redirect to this page. Otherwise, we will use this page to do bookmark rating (rubric).-->
            <% link_to 'Rate', :action => 'bookmark_rating', :id => bookmark.id %>
            <%= form_tag :action => "save_bookmark_rating_score", :id => bookmark.id do %>
              <% params[:rating] = rating %>
              <!-- specific average rating used for 'Your rating' -->
              <% specAvg = specific_average_score(bookmark) %>
              <% if specAvg != 0 %>
                <%= specAvg %>
              <% else %>
                <%= '-' %>
              <% end %>
              <% if BookmarkRating.where(bookmark_id: bookmark.id, user_id: session[:user].id).first.blank? %>
                <%= button_tag "Rate", {:id=>'button'+bookmark.id.to_s,:style=>"font-size:10px; display:none;"} %>
              <% else %>
                <%= button_tag "Update", {:id=>'button'+bookmark.id.to_s,:style=>"font-size:10px; display:none;"} %>
              <% end %>
            <% end %>
          <% else %>
            <%= '-' %>
          <% end %>
        </td>
        <td>
          <!-- badge rewards for bookmarks -->
          <!-- full star denotes presence of badge -->
          <!-- empty star denotes absence of badge -->
          <% if totalAvg.to_f > 3 %>
            <span class="glyphicon glyphicon-star"></span>
          <% else %>
            <span class="glyphicon glyphicon-star-empty"></span>
          <% end %>
        </td>
        <td>
          <!--Users can only review bookmarks that they did not add, and can only view/edit their own reviews.-->
          <% if bookmark.user_id != session[:user].id %>
            <% assignment_participant = AssignmentParticipant.find_by(user_id: session[:user].id) %>
            <% map = BookmarkRatingResponseMap.where(reviewed_object_id: @topic.assignment.id, reviewer_id: assignment_participant.id, reviewee_id: bookmark.id).first %>
            <% if map.nil? %>
              <% map = BookmarkRatingResponseMap.create(reviewed_object_id: @topic.assignment.id, reviewer_id: assignment_participant.id, reviewee_id: bookmark.id) %>
            <% end %>
            <% review = map.response.last %>
            <% if review.nil? %>
              <%= link_to "Review", {:controller => 'response', :action => 'new', :id => map.map_id, :return => "bookmark"} %>
            <% else %>
              <%= link_to "View", {:controller => 'response', :action => 'view', :id => review.id} %>
              <%= link_to "Edit", {:controller => 'response', :action => 'edit', :id => review.id, :return => "bookmark"} %>
            <% end %>
          <% else %>
            <%= '-' %>
          <% end %>
        </td>
        <!--Editing/destroying bookmarks is available to the user who added the bookmark, that user's team, and the instructor.-->
        <% is_teammate = false %>
        <% team = SignedUpTeam.find_by(topic_id: @topic.id) rescue nil %>
        <% if team %>
          <% teams_users = TeamsUser.where(['team_id = ?', team.team_id]) %>
          <% is_teammate = teams_users.select {|tu| tu.user_id == session[:user].id}.size > 0  %>
        <% end %>
        <% if bookmark.user_id == session[:user].id or is_teammate or ['Instructor'].include? @current_role_name %>
          <td><%= link_to 'Edit Bookmark', :action => 'edit', :id => bookmark.id %></td>
          <td><%= link_to 'Destroy Bookmark', bookmark, :confirm => "Delete bookmark \"#{bookmark.title}\"?", :method => :delete %></td>
        <% end %>
      </tr>
    <% end %>
  </table>
</div>

<br />

<%= link_to 'New bookmark', :action => 'new', :id => @topic.id %> |
<%= link_to 'Back', '#', :onclick => 'pageBack()' %>

<script>
    var bookmark_ids = <%=@bookmark_ids%>;
    bookmark_ids.forEach(function(bookmark_id){
        $('#'.concat(bookmark_id.toString())).change(function(){
            $('#button'.concat(bookmark_id.toString())).show();
        });
    });

    function pageBack() {
        history.back()
    }
</script>