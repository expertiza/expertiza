<!-- the table creation is changed top accommodate functionality of tablesorter, which requires thead and tbody separately. Previously, headers were in tbody only -->
<div class='reviewreport'>
  <!-- Added headers for tablesorter -->

  <script type='text/javascript'>
      $(window).load(function () {
          $("#myTable tbody");
          //to add drag and drop, uncomment this, and comment the above line
          //$("#myTable tbody").sortable();
          $("#dialog").dialog({
            autoOpen: false,
            modal: true,
            show: "blind",
            hide: "blind",
            buttons: {
              Ok: function() {
                $(this).dialog("close");
              }
            }
          });
      });
  </script>

  <div id="dialog" title="Success">Grade and comment for reviewer successfully saved.</div>

  <!-- Sets the styling configuration for the review display based on the status of the review -->
  <p> **In "Team reviewed" column text in:</p>
    <ul style="list-style-type:square">
  <li><i style="color:red">red</i> indicates that the review is not  completed in any rounds;</li>
  <li><i style="color:blue">blue</i> indicates that a review is completed in every round and the review grade is not assigned;</li>
  <li><i style="color:green">green</i> indicates that there is no submitted work to review within the round;</li>
  <li><i style="color:purple">purple</i> indicates that there is no review for a submitted work within the round;</li>
  <li><i style="color: #986633">brown</i> indicates that the review grade has been assigned</li>
  <li>&#10004; Check mark indicates that the student has given consent to make the reviews public</li>
</ul>
  <p>&nbsp;</p>

  <button onclick="exportTableToCSV('review_scores.csv')">Export Review Scores To CSV File</button>
  <br />
  <br />
  <table id="myTable" class="table table-striped" width="100%" cellspacing='0' cellpadding='2' border='0'>
    <thead>
    <tr bgcolor='#CCCCCC'>
      <!-- class value decides whether the column should be sortable or not  -->
      <th rowspan ="2" width="16%" class="sorter-true">Reviewer <span></span></th>
      <th rowspan ="2" width="10%" class="sorter-true">Reviews done<span></span></th>
      <th rowspan ="2" width="24%" class="sorter-true">Team reviewed <span></span></th>
      <th width="6%" colspan=  "2" class="sorter-false">Scores<span></span></th>
      <th rowspan ="2" width="14%" class="sorter-true">Metrics <span></span></th>
      <th rowspan ="2" class="sorter-false">Assign grade and write comments <span></span></th>
    </tr>
    <tr bgcolor='#CCCCCC'>

		  <th width="6%" class="sorter-true"> Score awarded <span></span></th>
		  <th width="6%" class="sorter-true"> AVG Score <span></span></th>
    </tr>
    </thead>
    <tbody>
    <!-- Handle data from response maps -->        
    <%= render :partial => 'review_response_map'%>
    </table>
 </div>
<!--Partial for text macro form-->
<%= render :partial => '/user_pastebins/save_text_macros' %>

<script>
    $(function () {
        /*Function for sorting the table */
        $("#myTable").tablesorter({
            sortList: [[0, 0]], //sort First Column by default when page loads
            widgets: ['zebra'], // Make sure to update the css when column is sorted
            headers: {
                4: {
                    sorter: 'customParser' //custom Parser to parse Metrics data for the custom parser
                }
            }
        });
    });


    $.tablesorter.addParser({
        id: "customParser",                                       //customParser for sorting by volume
        is: function (stringValue) {
            return false;
        },
        format: function (stringValue) {
            var stringNumericPart = stringValue.split(" ");         //split the data by spaces
            var numericValue = parseInt(stringNumericPart[2], 10);   //extract the numeric data
            return numericValue;
        },
        type: 'numeric'
    });
</script>

<script>
	function downloadCSV(csv, filename) {
		var csvFile;
		var downloadLink;

		// CSV file
		csvFile = new Blob([csv], {type: "text/csv"});

		// Download link
		downloadLink = document.createElement("a");

		// File name
		downloadLink.download = filename;

		// Create a link to the file
		downloadLink.href = window.URL.createObjectURL(csvFile);

		// Hide download link
		downloadLink.style.display = "none";

		// Add the link to DOM
		document.body.appendChild(downloadLink);

		// Click download link
		downloadLink.click();
	}
	
	// Method to extract review report fields data from HTML Table and convert the data into CSV format.
	// Currently, it will extract and store data for 'Full Name, Unity ID, Email ID, Grade and Comment' fields into CSV file 
	function exportTableToCSV(filename) {  	
		var csv = [];
		var rows = document.querySelector("table#myTable").rows;
		var row = [];
		row = setHeaderForCSV();
		csv.push(row.join(","));
		
    // for each row of information, pull the review report fields and save them to the corresponding variables
		for (var i = 1; i < rows.length; i++) {
			var row = [];
			
			reviewer_name = "\"" + rows[i].querySelector("td span.user_name").innerHTML + "\"";
			reviewer_unityid = rows[i].querySelector("td a.user_unityID").innerHTML;
			reviewer_emailid = reviewer_unityid + "@ncsu.edu";
			reviewer_grade = rows[i].querySelector("input#grade_for_reviewer").value;
			reviewer_comment = "\"" + rows[i].querySelector("textarea#comment_for_reviewer").innerHTML.replace(/"/g,"\'") + "\"";
			
      // push the information to set the information. 
			row.push(reviewer_name);
			row.push(reviewer_unityid);
			row.push(reviewer_emailid);
			row.push(reviewer_grade);
			row.push(reviewer_comment);
			
			csv.push(row.join(","));
              
		}
	
		downloadCSV(csv.join("\n"), filename);
	}
	
	// Method to set names of header columns in Exported CSV file
	function setHeaderForCSV() {
		var row = [];
		row.push("Name");
		row.push("UnityID");
		row.push("EmailID");
		row.push("Grade");
		row.push("Comment");
		
		return row;
	}
</script>
