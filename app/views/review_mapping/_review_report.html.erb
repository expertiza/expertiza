<div style="margin-bottom: 15px;">
  <%= link_to "Overall Sentiment analysis Report", {:controller => 'popup', :action => 'assignment_sentiment_analysis_popup', :assignment_id=>@id } %>
</div>
<%@l = -1 %>
      <!-- the table creation is changed top accomodate functionality of tablesorter, which requires thead and tbody seperately. Previously, headers were in tbody only -->
      <div class = 'reviewreport'>
  <!-- Added headers for tablesorter -->
  <table id="myTable" class="tbl_heat tablesorter" width="100%" cellspacing='0' cellpadding='2' border='0'>
    <thead>
    <tr bgcolor='#CCCCCC'>
  <!-- class value decides whether the column should be sortable or not  -->
      <th width = "16%" class="sorter-true">Reviewer <span></span></th>
      <th width = "10%" class="sorter-false">Reviews done<span></span></th>
      <!--Dr.Kidd's course-->
      <% if @assignment.instructor_id == 2026 %>
        <th width = "14%" class="sorter-false">Team reviewed <span></span></th>
        <th width = "14%" class="sorter-false">Author feedback <span></span></th>
      <% else %>
        <th width = "24%" class="sorter-false">Team reviewed <span></span></th>
      <% end %>
      <th width = "13%" class="sorter-false">Score awarded / Avg. score <span></span></th>
      <th width = "13%" class="sorter-true">Metrics <span></span></th>
      <th class="sorter-false">Assign grade and write comments <span></span></th>
    </tr>
    </thead>
<tbody>
<% sort_reviewer_by_review_volume_desc.each do |r| %>
        <% @response_maps, @bgcolor, @rspan, @l = get_data_for_review_report(@id, r.id, @type, @l) %>
        <tr>
        <%if r.id != -1 %>
          <% user = Participant.find(r.id).user %>
            <!--reviewer-->
            <td bgcolor=<%= @bgcolor %> rowspan= <%= @rspan%>>
              <%= link_to user.name, impersonate_impersonate_path(:user => {:name => user.name}), :method => :post %>
              (<%= user.fullname %>)
            </td>
            <!--# reviews done-->
            <td bgcolor=<%= @bgcolor %> rowspan= <%= @rspan%> align = 'left'>
              <% (1..@assignment.num_review_rounds).each do |round| %>
                <%= instance_variable_get("@review_in_round_" + round.to_s) %>/<%= @rspan %>
                <%= ', ' unless round == @assignment.num_review_rounds %>
              <% end %>
              <%= link_to "summary", {:controller => 'popup', :action => 'view_review_scores_popup', :reviewer_id => r.id, :assignment_id=>@id}, target: :_blank %>
            </td>

          <% @response_maps.each_with_index do |ri, index| %>
            <!--For assignments with team member 1, team reviewed column should show username instead of team name, which is randomly generated.-->
            <% team_name_color = get_team_name_color(ri) %>
            <% team_reviewed_link_name = get_team_reviewed_link_name(@assignment.max_team_size, ri.response, ri.reviewee_id) %>
              <% if Team.where(id: ri.reviewee_id).length > 0 %>
                <%@team = Team.find(ri.reviewee_id) %>
                <!--Team reviewed-->
                <td id = <%= team_name_color %> bgcolor=<%= @bgcolor %> align = 'left' colspan=1>
                  <%= link_to team_reviewed_link_name, :controller => 'popup', :action => 'team_users_popup', :id => ri.reviewee_id, :id2 => ri.id, :assignment_id=>@id %>
                  <%= list_review_submissions(r.id, ri.reviewee_id, ri.id) %>
                  <!--Hard-coded Dr.Kidd's question in order to display link.-->
                  <!--later we can create a hyperlink question type to deal with this situation.-->
                  <%= list_hyperlink_submission(ri.id, 5386) if @id.to_i == 806 %>
                </td>

                <!--Author feedback-->
                <!--Dr.Kidd required to add a "autor feedback" column that shows the average score the reviewers received from the authors. In this case, she can see all the data on a single screen.-->
                <!--Dr.Kidd's course-->
                <% if @assignment.instructor_id == 2026 %>
                  <td id = <%= team_name_color %> bgcolor=<%= @bgcolor %> align = 'left' colspan=1>
                    <%= calcutate_average_author_feedback_score(@assignment.id, @assignment.max_team_size, ri.id, ri.reviewee_id) %>
                  </td>
                <% end %>

                <!--Score awarded / Avg. score-->
                <%= render partial: 'team_score',  locals: {bgcolor: @bgcolor, team_id: @team.id, reviewer_id: r.id} %>
                <% if index == 0 %>
                  <!--Metrics-->
                  <td bgcolor=<%= @bgcolor %> rowspan= <%= @rspan%> align = 'left'>
                    <%= display_volume_metric(r.overall_avg_vol, r.avg_vol_in_round_1, r.avg_vol_in_round_2, r.avg_vol_in_round_3) %>
                    <!-- Sentiment Analysis for individual reviewer-->
                    <%= link_to "Sentiment analysis", :controller => 'popup', :action => 'reviewer_sentiment_analysis_popup', :id => r.id, :assignment_id=>@id %>

                  </td>
                  <!--Assign grade and write comments-->
                  <td bgcolor=<%= @bgcolor %> rowspan= <%= @rspan%> align = 'left'>
                    <%= form_tag 'save_grade_and_comment_for_reviewer', remote: true do %>
                      <%= hidden_field_tag :participant_id, r.id %>
                      <%= hidden_field_tag :assignment_id, @id %>
                      <%= number_field_tag 'grade_for_reviewer', r.review_grade.try(:grade_for_reviewer) ,min: 0, max: 100, maxlength: 3, size: 3, placeholder: 'Grade' %><br/>
                      <%= text_area_tag 'comment_for_reviewer', r.review_grade.try(:comment_for_reviewer), placeholder: 'Comment', class: "awesome_input", 'data-multiple' => '',  'data-minchars' => "1"  %>
                        <table class="inline-transparent">
                          <tr>
                            <td>
                              <%= image_tag 'text_macro.png', :border => 2, :title => 'Text Macro/Pastebin', :style => 'width: 24px; height:30px', :onclick => 'show_text_macros()'%>
                            </td>
                          </tr>
                          <tr>
                            <td>
                              <%= submit_tag 'Save' %>
                            </td>
                          </tr>
                        </table>
                    <% end %>
                  </td>
                <% end %>
                </tr><tr class = "tablesorter-childRow">
              <%end%>
            <%end %>
          <%end %>
        </tr>
      <%end %>
</table>

  <p> **Text in <i style = "color:red">red</i> indicates that the review is not yet completed; text in <i style = "color:blue">blue</i> indicates that the review grade is not assigned or updated.</p>
</div>
  <!--Partial for text macro form-->
 <%= render :partial => '/user_pastebins/save_text_macros'%>
<style>
  /*TableSorter CSS styles */
  th.tablesorter-headerAsc{
    /* Style for Up Arrow */
    background-image: url(<%= asset_path("up-arrow.png") %>);
    background-size: 15px 15px;
    background-repeat: no-repeat;
    background-position: center right;
    padding-right: 15px;
  }

  th.tablesorter-headerDesc{
    /* Style for down arrow */
    background-image: url(<%= asset_path("down-arrow.png") %>);
    background-size: 15px 15px;
    background-repeat: no-repeat;
    background-position: center right;
    padding-right: 15px;
  }

  /* Style for no-sort*/
  th.sorter-true.tablesorter-headerUnSorted{
    /* Style for default view  */
    background-image: url(<%= asset_path("sort.png") %>);
    background-size: 15px 7px;
    background-repeat: no-repeat;
    background-position: center right;
    padding-right: 15px;

  }
</style>

<script>
$(function () {
  /*Function for sorting the table */
		 $("#myTable").tablesorter({
		sortList: [[0,0]], //sort First Column by default when page loads
		headers: {
     		   4: {
      			  sorter: 'customParser' //custom Parser to parse Metrics data for the custom parser
     		      }
   		 }
		});
	});


$.tablesorter.addParser({
  id: "customParser",                                       //customParser for sorting by volume
  is: function (stringValue) {
    return false;
  },
  format: function (stringValue) {
    var stringNumericPart = stringValue.split(" ");         //split the data by spaces
    var numericValue = parseInt(stringNumericPart[2],10);   //extract the numeric data
    return numericValue ;
  },
  type: 'numeric'
});
</script>
