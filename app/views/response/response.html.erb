<script>
jQuery(document).ready(function() {

  // E17A0 After 15 minuts of inactivity, a 5 minute countdown to autosave begins
  var last_activity_time = new Date();
  var default_timeout_time_in_seconds = 900;
  var default_timeout_time_countdown_in_seconds = 300;
  var timed_out = false;

  $( ".flash_error" ).hide();
  jQuery('#Submit').click(function(e){
    if(!confirm('Once a review has been submitted, you cannot edit it again')){
      e.preventDefault();
      e.stopPropagation();
      return;
    } else {
      jQuery('#isSubmit').val('Yes');
    }
  })

  $(function(){
    $("form").sisyphus({
        locationBased: true,
        autoRelease: true
    });
  });

  // E17AO When user presses a key, moves or clicks mouse, reset last activity time to current time and begin countdown
  $(document).on( "keypress mousedown mousemove", function () {
    last_activity_time = new Date();
    timed_out = false;
    default_timeout_time_in_seconds = 900;
    default_timeout_time_countdown_in_seconds = 300;
    $(".flash_error").hide();
  });

  // E17A0 Check every   seconds to see if browser idle for more than 20 minutes
  // E17A0 After browser is idle for 15 ,minutes, begin a countdown to autosave with a flashing notice
  // E17AO If idle for more than 20 minutes, save review
  if(!timed_out) {
    setInterval(function () {
      var current_time = new Date();
      var time_difference_in_seconds = (current_time - last_activity_time) / 1000;
      var time_out_time_string = "";

      if (time_difference_in_seconds > default_timeout_time_in_seconds) {
        default_timeout_time_countdown_in_seconds--;

        if(default_timeout_time_countdown_in_seconds > 120) {
            time_out_time_string = Math.floor(default_timeout_time_countdown_in_seconds / 60) + " minutes  and " + (default_timeout_time_countdown_in_seconds % 60) + " seconds"
        }
        else if(default_timeout_time_countdown_in_seconds > 60) {
          time_out_time_string = Math.floor(default_timeout_time_countdown_in_seconds / 60) + " minute  and " + (default_timeout_time_countdown_in_seconds % 60) + " seconds"
        } else {
          time_out_time_string = (default_timeout_time_countdown_in_seconds % 60) + " seconds"
        }

        $(".flash_error").html("You review will be automatically saved and closed in " + time_out_time_string + " if no activity is detected!");
        $(".flash_error").delay(100).fadeOut().fadeIn('slow');
        if (default_timeout_time_countdown_in_seconds == 0) {
          $('#autosave_timeout_id').val(time_difference_in_seconds);
          timed_out = true;
          $(".flash_error").remove();
          $("#Save").click();
        }
      }
    }, 1000);
  }
})
</script>

<% if @map.survey? %>
    <h1><%= @header %> <%= @title %> for <%= @map.survey_parent.name %></h1>
<% else %>
    <h1><%= @header %> <%= @title %> for <%= @map.assignment.name %></h1>

    <% if !@map.contributor.nil? && !@map.instance_of?(FeedbackResponseMap) %>
        <% if @map.assignment.team_assignment? %>
            <% team_member = TeamsUser.find_by_team_id(@map.contributor).user_id%>
            <% topic_id = SignedUpTeam.topic_id(@map.assignment.id, team_member) %>
        <% else %>
            <% participant = Participant.find(TeamsUser.find_by_team_id(@map.contributor).user_id) %>
            <% topic_id = SignedUpTeam.where(participant.parent_id, participant.user_id) %>
        <% end %>
        <% if !topic_id.nil? %>
            <% topic = SignUpTopic.find(topic_id)%>
            <h2>You are reviewing <%= topic.topic_name %></h2>
            <% if !topic.description.nil? %>
              <b>Description &nbsp;&nbsp;&nbsp;</b>
              <% if topic.description.to_s.length>90 %>
                <%= topic.description.to_s[0..90]+'...'%>
                <a style="cursor: pointer" onclick="show_alert('<%= topic.description%>')">more...</a>
              <% else %>
                <%= topic.description.to_s%>
              <% end %>
              <% if topic.link != nil then %>
                  <%= link_to image_tag('external-link-16.png', :border => 0, :align => 'middle'), topic.link, :target=>'_blank' %>
              <% end%>
            <% end %>
        <% end %>

        <%if @assignment.teams?%>
            <% topic_id = SignedUpTeam.topic_id(@participant.parent_id, @participant.user_id) %>
            <%= render :partial => 'submitted_content/main', :locals => {:reviewee_participant => @contributor.participants.first,:participant => @contributor.participants.first, :stage => @assignment.get_current_stage(topic_id)} %>
        <%else%>
            <% topic_id = SignedUpTeam.topic_id(@participant.parent_id, @participant.user_id) %>
            <%= render :partial => 'submitted_content/main', :locals => {:participant => @contributor, :stage => @assignment.get_current_stage(topic_id)} %>
        <%end%>
        <hr>
    <% end %>
<% end %>
<!-- display all versions available -->
<% @responses_versions = Array.new %>
<% @responses_versions = @map.get_all_versions() %>

<% if @responses_versions.empty? %>
    <i>No previous review was performed.</i><hr>
<% else %>
    <%= render :partial => 'review', :locals => {:versions => @responses_versions} %>
<% end %>
<h2>Directions for the reviewer</h2>

<%= form_tag :action => @next_action, :id => @modified_object  do %>
    <% if @next_action.eql?'update' %>
        <input name="_method" type="hidden" value="put" />
    <%end%>
    <% i = 0 %>
    <%@questions.each do |question| %>
       <% answer = Answer.where(question_id: question.id, response_id: @response.id).first if !@response.nil?%>
       <% if question.instance_of? Criterion%>
            <%= question.complete(i, answer, @questionnaire.min_question_score, @questionnaire.max_question_score, @dropdown_or_scale) %>
       <% elsif question.instance_of? Scale %>
            <%= question.complete(i, answer, @questionnaire.min_question_score, @questionnaire.max_question_score) %>
       <% elsif question.instance_of? UploadFile %>
            <!--One form had better not in another form-->
            <!--Zhewei: I move the Uploadfile question to the end of questionnaire. So multiple forms will not been overlapped.-->
       <% else %>
            <%= question.complete(i, answer) %>
       <% end %>
       <% i += 1%>
    <% end %>

    <!--#E17A0 Formatted this section to have a list and not have leading white spaces-->
    <div><label for="review_comments">Additional Comments</label></div>
    <% if controller.action_name != 'new' and @response.additional_comment != nil %>
      <% additional_review_comments = @response.additional_comment.strip if !@response.nil? %>
    <% end %>
    <div><textarea cols="70" rows="1" id="review_comments" name="review[comments]" style="overflow:hidden"><%= additional_review_comments %></textarea></div>

    <%if @current_round%>
      <%= hidden_field_tag "review[round]", @current_round %>
    <%end%>
    <%= hidden_field_tag "review[questionnaire_id]", @questionnaire.id %>

    <br>
    <%= submit_tag "Save "+@title, :name => "save", :id => "Save" %>
    <!--#E1600 check title for selfreview to show submit button-->
    <% if @title && ((@title.eql? 'Review') || (@title.eql? 'Self Review')) %>
        <%= submit_tag "Submit "+@title, :name => "Submit", :id => "Submit" %>
        <img src="/assets/info.png" title='- SAVE will only store the peer-review as draft and the peer-review will not be displayed to the reviewee. After clicking SUBMIT, the peer-review will be displayed to reviewee, and you will not be able to update it any more.'>
    <% end %>
    <%= hidden_field_tag :authenticity_token, value: form_authenticity_token %>
    <%= hidden_field_tag 'autosave_timeout', 0, id: 'autosave_timeout_id' %>
    <%= hidden_field_tag('return', @return) %>
    <%= hidden_field_tag  "isSubmit", :id=>"isSubmit" %>
<% end %>
<!--Check whether there is a UploadFile question.-->
<%@questions.each do |question| %>
    <% if question.instance_of? UploadFile %>
        <!--params[:origin] means from where do the files upload-->
        <!--If the files uploaded from submitted_work (students hand in assignment), params[:origin] will be nil-->
        <!--If the files uploaded from peer review, params[:origin] will be 'review'-->
        <% if params[:action] == 'new' %>
            <% response_map_id = params[:id] %>
        <% elsif params[:action] == 'edit' %>
            <% response_map_id = Response.find(params[:id]).response_map.id %>
        <% end %>
        <%= render partial: 'submitted_content/submitted_files', locals: {participant: @participant, stage: @stage, origin: 'review', response_map_id: response_map_id} %>
    <% end %>
<% end %>
<%= @map.show_feedback(@response) %>
<a href="javascript:window.history.back()">Back</a>
<div id="dialog-message" style="word-wrap: normal"></div>
