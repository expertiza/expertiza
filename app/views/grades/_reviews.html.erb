<% if rscore and rscore[:assessments].length > 0 %>
    <BR/>
    <%flag_varying_rubrics=false%>

    <%if @questions.has_key?("review1".to_sym)%>
        <b> Round 1:</b>
        <%flag_varying_rubrics=true%>
        <%= render :partial => 'grades/review_table', :locals => { :ctrl => 'review', :caction => 'view_review', :symbol => "review1".to_sym, :prefix => prefix, :assignment => participant.assignment, :reviews => rscore[:assessments], :collabel => "Review", :rowlabel => "Reviewer", :round=>1 }%>
    <%end%>

    <%if @questions.has_key?("review2".to_sym)%>
        <b> Round 2:</b>
        <%flag_varying_rubrics=true%>
        <%= render :partial => 'grades/review_table', :locals => { :ctrl => 'review', :caction => 'view_review', :symbol => "review2".to_sym, :prefix => prefix, :assignment => participant.assignment, :reviews => rscore[:assessments], :collabel => "Review", :rowlabel => "Reviewer" , :round=>2 }%>
    <%end%>

    <%if @questions.has_key?("review3".to_sym)%>
        <b> Round 3:</b>
        <%flag_varying_rubrics=true%>
        <%= render :partial => 'grades/review_table', :locals => { :ctrl => 'review', :caction => 'view_review', :symbol => "review3".to_sym, :prefix => prefix, :assignment => participant.assignment, :reviews => rscore[:assessments], :collabel => "Review", :rowlabel => "Reviewer" , :round=>3 }%>
    <%end%>
    
    <%if flag_varying_rubrics==false%>
        <%= render :partial => 'grades/review_table', :locals => { :ctrl => 'review', :caction => 'view_review', :symbol => "review".to_sym, :prefix => prefix, :assignment => participant.assignment, :reviews => rscore[:assessments], :collabel => "Review", :rowlabel => "Reviewer" }%>
    <%end%>
    <BR/>
    <HR/>
    <% count = 0 %>
    <!--Zhewei: If this assignment supports varying rubrics by round, Expertiza will display all-round reviews. -->
    <!--And if one reviewer did not do first-round review and did second round directly, Expertiza will display only second round.-->
    <!--If another reviewer only finished first-round review and did not do second round, Expertiza will display only first round.-->
    <!--If this assignment does not support varying rubrics by round, Expertiza will display last round review.--> 
    <% rscore[:assessments].uniq!{|response| response.map_id} if @assignment.varying_rubrics_by_round? %>
    <% for review in rscore[:assessments] %>
        <% review_feedback = nil %>
        <% count = count + 1 %>
        <% if controller.action_name != "view_my_scores" %>
            <h2>Review <%= count %></h2><BR/>
            <a name="<%=prefix+"_"+review.map.reviewer.name%>"></a><%= review.display_as_html(prefix, count) %>
            <BR/><HR/>
        <% else %>
            <h2>Review <%= count %></h2><BR/>
            <!--<%= review.display_as_html(nil, count) %><BR/>-->
            <!--change code in order to compat to multi-round review-->
            <% if @assignment.varying_rubrics_by_round? and !review.round.nil? %>
                <% review_symbol = 'review' + review.round.to_s %>
            <% else %>
                <% review_symbol = 'review' %>
            <% end %>
            <% @questions[review_symbol.to_sym].each do |question| %>
                <% if question.instance_of? UploadFile %>
                    <!--Display FileUpload question type-->
                    <% current_folder = DisplayOption.new %>
                    <% current_folder.name = "" %>
                    <% files = @participant.files(@participant.review_file_path(review.response_map.id).to_s + current_folder.name) %>
                    <%= display_directory_tree(@participant, files, true).html_safe %>
                <% end %>
            <% end %>

            <!-- get all previous versions -->
            <% @sorted_array=Array.new %>
            <% @prev=review.map.response %>
            <%for element in @prev %>
                <%if(element.map_id==review.map.id && (element.isSubmitted.nil? || element.isSubmitted.eql?('Yes')))%>
                    <%array_not_empty=1 %>
                    <% @sorted_array << element %>
                <% end %>
            <% end %>
            <% @sorted=@sorted_array.sort %>
            <% if !@assignment.varying_rubrics_by_round? and @sorted_array.size > 0%>
                <% @sorted.clear %>
                <% @sorted << @sorted_array.sort.last %>
            <% end %>
            <% if @sorted.size > 0 %>
                <% for i in 0..@sorted.size-1 %>
                    <% @str = @sorted[i].id.to_s %>
                    <%= @sorted[i].display_as_html(nil,i+1, nil) %><br/>
                    <script>
                        toggleElement('reviews_<%=@str%>','review');
                    </script>
                <% end %>
                <!-- keep only latest version open -->
                <% for i in 0..@sorted.size-1 %>
                    <% @str = @sorted[i].id.to_s %>
                    <script>
                        toggleElement('review_<%=@str%>','review')
                    </script>
                <% end %>
            <% end %>
            <% map = FeedbackResponseMap.find_by_reviewed_object_id(review.id)
                review_feedbacks = map.try :response %>
            <% if review_feedbacks && !review_feedbacks.empty? %>
                <%= link_to "View", :controller => 'response', :action => 'view', :id => review_feedbacks.first.id %> or
                <%= link_to "Edit", :controller => 'response', :action => 'edit', :id => review_feedbacks.first.id, :return => "feedback" %> feedback for Review <%= count %>
            <% else %>
                <%= link_to "Give feedback", :controller => 'response', :action => 'new_feedback', :id => review.id %> for Review <%= count %>
            <% end %>
            <BR/><HR/>
        <% end %>
    <% end %>
<% else %>
    <i>No reviews have been completed for this user's submissions.</i>
<% end %>
