<!DOCTYPE html>
<html>
<head>
    <title>Convert JSON Data to HTML Table</title>
    <style>
        th, td, p, input, h3 {
            font:15px 'Segoe UI';
        }
        table, th, td {
            border: solid 1px #ddd;
            border-collapse: collapse;
            padding: 2px 3px;
            text-align: center;
        }
        th {
            font-weight:bold;
        }
    </style>

    <style>
		table {
		    border-color: black;
		}

		.vGood {
		    background-color: #BCED91;
		}

		.avg {
		    background-color: #FFEC8B;
		}

		.poor {
		    background-color: #FF8080;
		}
	</style>
	<style>
	    .parentCell_metric_table{
	        position: relative;
	    }
	    .tooltip_metric_table{
	        display: none;
	        position: absolute;
	        z-index: 100;
	        border: 1px;
	        background-color: white;
	        border: 1px solid black;
	        padding: 3px;
	        color: black;
	        top: 20px;
	        left: 20px;
	    }
	    .parentCell_metric_table:hover span.tooltip_metric_table{
	        display:block;
	    }
	</style>
    <link rel="stylesheet" href="http://code.jquery.com/ui/1.9.1/themes/base/jquery-ui.css" />

    

</head>
<body>
<br>
	
    <br>
    <input type='button' onclick='tableFromJson()' 
    	value='Get Review Feedback' />
    <br>    
    <br>
    <p id='showData'></p>
<br>
    <div id='timeTaken'></div>   
</body>
<script  src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
 <script>
        var final_json;
        var response_general = null;        
       function makeRequest(final_json,url) {
               return new Promise(function (resolve, reject) {
                    let xhr = new XMLHttpRequest();
                    xhr.open('POST', url);
                    xhr.setRequestHeader('content-type', 'application/json');
                    xhr.onload = function () {
                        if (this.status >= 200 && this.status < 300) {
                            resolve(xhr.response);
                            response_general = xhr.response;
                        } else {
                            reject({
                                status: this.status,
                                statusText: xhr.statusText
                            });
                        }
                    };
                    xhr.onerror = function () {
                        reject({
                            status: this.status,
                            statusText: xhr.statusText
                        });
                    };
                    xhr.send(final_json);
                });
            }
         async function tableFromJson() 
        {

            var config_file_manage =   $('.temp_information').data('temp') ;
          
           
            var t0 = performance.now();
            var de = $("form").serialize();      
            $("#d").text($("form").serialize());
            var myBooks = [Object.fromEntries(new URLSearchParams(de))]
            console.log(myBooks[0]);
            var j = 0;
            for(j =0; j <1000; j++)
            {
                if (document.getElementById("responses_"+j+"_comments") == null)
                {break;}
            }
            var obj = new Object();           
            var jsonString = "";
            var id = 0;
            var reviews = [];
           for (var i =2; i < (j); i++) {              
                if (document.getElementById("responses_"+i+"_comments") == null)
                     continue;
                 else
                 {
                    var dict = {};
                    dict["id"] = id;
                    var tem = (document.getElementById("responses_"+i+"_comments").value);
                   console.log(tem);
                   tem =  $("<p>").html(tem).text();
                   tem = tem.replace("\n"," ");
                     dict["text"] = tem.replace("\r","");
                    id++;
                    reviews.push(dict);
                 }
           }
                        var dict = {};
                        dict["id"] = id;
                        var tem =  (document.getElementById("responses_"+0+"_comments").value);
                        tem =  $("<p>").html(tem).text();
                        tem = tem.replace("\n"," ");
                        dict["text"] = tem.replace("\r","");                        
                        id++;
                        reviews.push(dict);
                        dict = {};
                        dict["id"] = id;
                        tem = myBooks[0]['review[comments]'];
                        tem =  $("<p>").html(tem).text();
                        tem = tem.replace("\n"," ");
                        dict["text"] = tem.replace("\r","");                       
                        id++;
                        reviews.push(dict);
            console.log(reviews);
            var final_obj = {};
            final_obj["reviews"] = reviews;
            final_json = JSON.stringify(final_obj);

//////////////////// **** Sentiment ********* //////////////////////////////   
    if(config_file_manage.includes('sentiment'))
    {
        console.log("Now printing response_sentiment");
        var promise_sentiment = await makeRequest(final_json, 'https://peerlogic.csc.ncsu.edu/sentiment/analyze_reviews_bulk')
        var response_sentiment = JSON.parse(response_general);
        response_general = null;
        console.log(response_sentiment);
    }
//////////////////// **** Problem ********* //////////////////////////////  
    if(config_file_manage.includes('problem'))
    { 
        console.log("Now printing response_problem");
        var promise_problem = await makeRequest(final_json, 'http://152.7.99.200:5000/problem')
        var response_problem = JSON.parse(response_general);
        response_general = null;
        console.log(response_problem);
    }

//////////////////// **** Suggestion ********* //////////////////////////////   
    if(config_file_manage.includes('suggestion'))
    {
        console.log("Now printing response_suggestion");
        var promise_suggestion = await makeRequest(final_json, 'http://152.7.99.200:5000/suggestions')
        var response_suggestion = JSON.parse(response_general);
        response_general = null;
        console.log(response_suggestion);
    }

/////////////////////////////////////////////////////////////////////////////////////////////
            var obj;
            var obj_id = 1;
            var pos; var neg; var neu;
            myBooks = [];
            for(var i =0; i< final_obj["reviews"].length; i++)        
            {

              var dict_final = {};
              dict_final["Comment_Number"] = i+1;

                if(config_file_manage.includes('sentiment'))
                {
                    pos = response_sentiment['sentiments'][i]['pos'];
                    neg = response_sentiment['sentiments'][i]['neg'];
                    neu = response_sentiment['sentiments'][i]['neu'];

                    if ( pos > neg && pos > neu )
                        dict_final["Sentiment"] = 'Positive'; 
                    if ( neu > pos && neu > neg )
                        dict_final["Sentiment"] = 'Neutral'; 
                    if ( neg > neu && neg > pos )
                        dict_final["Sentiment"] = 'Negative';  
                }  
              
               if(config_file_manage.includes('problem'))
                   { dict_final["Problem_Detected?"] = response_problem['reviews'][i]['problems'] }

                if(config_file_manage.includes('suggestion'))
                    { dict_final["Suggestion?"] = response_suggestion['reviews'][i]['suggestions'] }
             
            myBooks.push(dict_final);              
            }
            console.log(myBooks);

////////////////////////////////////////////////////////////////////////////////
        
          var tooltip_json = {"Comment_Number":'The comment number from the top in the form.', "Sentiment": 'This column shows the tone of the comment.', "Problem_Detected?": 'This shows whether any problem is mentioned in the comment or not.',"Suggestion?": 'This shows whether any problem is mentioned in the comment or not.'}

            var col = [];
            for (var i = 0; i < myBooks.length; i++) {
                for (var key in myBooks[i]) {
                    if (col.indexOf(key) === -1) {
                        col.push(key);
                    }
                }
            }

            // Create a table.
            var table = document.createElement("table");

            // Create table header row using the extracted headers above.
            var tr = table.insertRow(-1);                   // table row.

            for (var i = 0; i < col.length; i++) {
                var th = document.createElement("th");      // table header.
                th.innerHTML = col[i] + ` <span class="tooltip_metric_table">`+tooltip_json[col[i]]+`</span>`;
                th.classList.add("parentCell_metric_table");
                tr.appendChild(th);
            }

            // add json data to the table as rows.
            for (var i = 0; i < myBooks.length; i++) {

                tr = table.insertRow(-1);

                for (var j = 0; j < col.length; j++) {
                    var tabCell = tr.insertCell(-1);
                    tabCell.innerHTML = myBooks[i][col[j]];
                }
            }

            // Now, add the newly created table with json data, to a container.
            var divShowData = document.getElementById('showData');
            divShowData.innerHTML = "";
            divShowData.appendChild(table);
            t1 = performance.now();
            var time = t1 - t0;
            var obj5 = document.getElementById('timeTaken');
            console.log("Printing Time taken ");
            console.log(obj5);
            obj5.innerHTML = `<p> Time taken is ${(time/1000).toFixed(2)} seconds. </p>`;
            color();
        }
   
</script>

<script>
function color(){    $('td').each(

function() {
    var score = $(this).text();
    
    if (score == 'Positive' || score == 'Present') {
        $(this).addClass('vGood');
    }
    
    else if (score == 'Neutral') {
        $(this).addClass('avg');
    }
    else if (score == 'Negative' || score == 'Absent') {
        $(this).addClass('poor');
    }
    });}
</script>
</html>