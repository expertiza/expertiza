{
  "name": "envify",
  "version": "3.4.1",
  "description": "Selectively replace Node-style environment variables with plain strings.",
  "main": "index.js",
  "scripts": {
    "test": "node test.js | tap-spec"
  },
  "bin": {
    "envify": "bin/envify"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/envify.git"
  },
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com/"
  },
  "license": "MIT",
  "devDependencies": {
    "tap-spec": "^4.1.1",
    "tape": "^4.6.0"
  },
  "dependencies": {
    "through": "~2.3.4",
    "jstransform": "^11.0.3"
  },
  "keywords": [
    "environment",
    "variables",
    "browserify",
    "browserify-transform",
    "transform",
    "source",
    "configuration"
  ],
  "readme": "# envify  [![Build Status](https://secure.travis-ci.org/hughsk/envify.png?branch=master)](http://travis-ci.org/hughsk/envify) [![stable](http://hughsk.github.io/stability-badges/dist/stable.svg)](http://github.com/hughsk/stability-badges) #\n\nSelectively replace Node-style environment variables with plain strings.\nAvailable as a standalone CLI tool and a\n[Browserify](http://browserify.org) v2 transform.\n\nWorks best in combination with [uglifyify](http://github.com/hughsk/uglifyify).\n\n## Installation ##\n\nIf you're using the module with Browserify:\n\n``` bash\nnpm install envify browserify\n```\n\nOr, for the CLI:\n\n``` bash\nsudo npm install -g envify\n```\n\n## Usage ##\n\nenvify will replace your environment variable checks with ordinary strings -\nonly the variables you use will be included, so you don't have to worry about,\nsay, `AWS_SECRET_KEY` leaking through either. Take this example script:\n\n``` javascript\nif (process.env.NODE_ENV === \"development\") {\n  console.log('development only')\n}\n```\n\nAfter running it through envify with `NODE_ENV` set to `production`, you'll\nget this:\n\n``` javascript\nif (\"production\" === \"development\") {\n  console.log('development only')\n}\n```\n\nBy running this through a good minifier (e.g.\n[UglifyJS2](https://github.com/mishoo/UglifyJS)), the above code would be\nstripped out completely.\n\nHowever, if you bundled the same script with `NODE_ENV` set to `development`:\n\n``` javascript\nif (\"development\" === \"development\") {\n  console.log('development only')\n}\n```\n\nThe `if` statement will evaluate to `true`, so the code won't be removed.\n\n## CLI Usage ##\n\nWith browserify:\n\n``` bash\nbrowserify index.js -t envify > bundle.js\n```\n\nOr standalone:\n\n``` bash\nenvify index.js > bundle.js\n```\n\nYou can also specify additional custom environment variables using\nbrowserify's [subarg](http://github.com/substack/subarg) syntax, which is\navailable in versions 3.25.0 and above:\n\n``` bash\nbrowserify index.js -t [ envify --NODE_ENV development ] > bundle.js\nbrowserify index.js -t [ envify --NODE_ENV production  ] > bundle.js\n```\n\n## Module Usage ##\n\n**require('envify')**\n\nReturns a transform stream that updates based on the Node process'\n`process.env` object.\n\n**require('envify/custom')([environment])**\n\nIf you want to stay away from your environment variables, you can supply\nyour own object to use in its place:\n\n``` javascript\nvar browserify = require('browserify')\n  , envify = require('envify/custom')\n  , fs = require('fs')\n\nvar b = browserify('main.js')\n  , output = fs.createWriteStream('bundle.js')\n\nb.transform(envify({\n  NODE_ENV: 'development'\n}))\nb.bundle().pipe(output)\n```\n\n## Purging `process.env` ##\n\nBy default, environment variables that are not defined will be left untouched.\nThis is because in some cases, you might want to run an envify transform over\nyour source more than once, and removing these values would make that\nimpossible.\n\nHowever, if any references to `process.env` are remaining after transforming\nyour source with envify, browserify will automatically insert its shim for\nNode's process object, which will increase the size of your bundle. This weighs\nin at around 2KB, so if you're trying to be conservative with your bundle size\nyou can \"purge\" these remaining variables such that any missing ones are simply\nreplaced with undefined.\n\nTo do so through the command-line, simply use the subarg syntax and include\n`purge` after `envify`, e.g.:\n\n``` bash\nbrowserify index.js -t [ envify purge --NODE_ENV development ]\n```\n\nOr if you're using the module API, you can pass `_: \"purge\"` into your\narguments like so:\n\n``` javascript\nb.transform(envify({\n    _: 'purge'\n  , NODE_ENV: 'development'\n}))\n```\n\n## Contributors ##\n\n* [hughsk](http://github.com/hughsk)\n* [benjamn](http://github.com/benjamn)\n* [zag2art](http://github.com/zag2art)\n* [bjoerge](http://github.com/bjoerge)\n* [andreypopp](http://github.com/andreypopp)\n* [jupl](http://github.com/jupl)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hughsk/envify/issues"
  },
  "_id": "envify@3.4.1",
  "dist": {
    "shasum": "959436ccbdfe7528a49cffd5240c0ab619d74706"
  },
  "_from": "envify@^3.0.0",
  "_resolved": "https://registry.npmjs.org/envify/-/envify-3.4.1.tgz"
}
