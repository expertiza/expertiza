<script>

function teamAssignmentChanged() {
  var msg = 'Warning! Unchecking this box will hide teams that already exist.'

  if (jQuery('#assignment_team_assignment').is(':checked')) {
    jQuery('#assignment_team_count_field').removeAttr('hidden');
     <% if due_date(@assignment_form.assignment, 'team_formation') %>
      addDueDateTableElement('team_formation', 0, <%= due_date(@assignment_form.assignment, 'team_formation').to_json.html_safe %>)
     <% end %>
  } else {
    if (confirm(msg)) {
      jQuery('#assignment_team_count_field').attr('hidden', true);
      removeDueDateTableElement('team_formation', 0);
    } else {
      jQuery('#assignment_team_assignment').prop('checked', true);
    }
  }
}

function microtaskChanged() {
  if (jQuery('#assignment_microtask').is(':checked')) {

  } else {

  }
}

</script>

<table id='assignment_general_info_table' class="borderless">
<tr class='heading'>
<th width="0%"></th>
<th width="100%"></th>
</tr>

<%= hidden_field_tag('assignment_form[assignment][instructor_id]', @assignment_form.assignment.instructor_id) %>
<%= hidden_field_tag('assignment_form[assignment][course_id]', @assignment_form.assignment.course_id) %>
<%= hidden_field_tag('assignment_form[assignment][id]', @assignment_form.assignment.id) %>

<tr>
<td style='padding:5px'><%= label_tag('assignment_form[assignment][name]', 'Assignment name:') %></td>
<td style='padding:5px'><%= text_field_tag('assignment_form[assignment][name]', @assignment_form.assignment.name, :style => 'width:250px', class: 'form-control') %></td>
</tr>

<tr>
<td style='padding:5px'><%= label_tag('assignment_form[assignment][course_id]', 'Course:') %></td>
<td style='padding:5px'><%= select('assignment_form[assignment]', 'course_id', course_options(@assignment_form.assignment.instructor), {:selected => @assignment_form.assignment.course_id}, {:class => "form-control", :style => 'width: 250px'}) %></td>
</tr>

<tr><div class="form-inline">
<td style='padding:5px'><%= label_tag('assignment_form[assignment][directory_path]', 'Submission directory:') %></td>
<td style='padding:5px'><%= text_field_tag('assignment_form[assignment][directory_path]', @assignment_form.assignment.directory_path, :style => 'width:250px', class: 'form-control') %>  (Mandatory field. No space or special chars. <br/> Directory name will be auto-generated if not provided. In the form of assignment_[assignment_id].)
  <img src="/assets/info.png" title='- DO NOT change this filed for an on-going assignment. This may cause lost of student submitted file.'>
</td></div>
</tr>

<tr>
<td style='padding:5px'><%= label_tag('assignment_form[assignment][spec_location]', 'Description URL: ') %></td>
<td style='padding:5px'><%= text_field_tag('assignment_form[assignment][spec_location]', @assignment_form.assignment.spec_location, :style => 'width:250px', class: 'form-control') %></td>
</tr>
</table>

<br/>
<hr/>

<table id='assignment_general_setting_table' class="borderless table-not-full-width">
<tr class='heading'>
<th width=82%></th>
<th width=100%></th>
  </tr>

  <tr>
    <td style='padding:5px' id='assignment_access'>
      <p><input name="assignment_form[assignment][private]" type="hidden" value="false"/>
        <%= check_box_tag('assignment_form[assignment][private]', 'true', @assignment_form.assignment.private? || !params[:private].to_i.zero?) %>
        <%= label_tag('assignment_form[assignment][private]', 'Private assignment') %></p>
    </td>
  </tr>

  <tr>
    <td style='padding:5px' id='assignment_team_assignment_field'>

      <div class="form-inline">
      <% if(@assignment_form.assignment.max_team_size == 1)%>
        <%= check_box_tag('team_assignment', 'true', false, {:onChange => 'hasTeamsChanged()'}) %>
      <% else %>
        <%= check_box_tag('team_assignment', 'true', @assignment_form.assignment.team_assignment?, {:onChange => 'hasTeamsChanged()'}) %>
      <% end %>
      <% @assignment_form.assignment.max_team_size %>
      <%= label_tag('team_assignment', 'Has teams?') %>

    <span style='padding:5px' class="form-inline" id='assignment_team_count_field' <%= 'hidden' if @assignment_form.assignment.max_team_size == 1%>>

      <!--Teammate reviews fields-->
      <input name="assignment_form[assignment][show_teammate_reviews]" type="hidden" value="false"/>
      <%= label_tag('assignment_form[assignment][max_team_size]', 'Maximum number of members per team:') %>
      <%= text_field_tag('assignment_form[assignment][max_team_size]', @assignment_form.assignment.max_team_size, {:style => 'width:50px;', class: 'form-control'}) %>
    
      </span>
      </div>
      <span id='assignment_show_teammate_reviews' class="form-inline"  <%= 'hidden' if @assignment_form.assignment.max_team_size < 2%>>

      <%= check_box_tag('assignment_form[assignment][show_teammate_reviews]', 'true', @assignment_form.assignment.show_teammate_reviews) %>
      <%= label_tag('assignment_form[assignment][show_teammate_reviews]', 'Show teammate reviews?') %>
    </span>
      &nbsp;&nbsp;&nbsp;&nbsp;
      <!--Maximum number of members per team-->
    </td>
  </tr>

  <!--Quiz fields-->
  <tr>
    <td style='padding:5px' id='assignment_require_quiz_field'>
      <input name="assignment_form[assignment][require_quiz]" type="hidden" value="false"/>
      <%= check_box_tag('assignment_form[assignment][require_quiz]', 'true', @assignment_form.assignment.require_quiz, {:onChange => 'hasQuizChanged()'}) %>
      <%= label_tag('assignment_form[assignment][require_quiz]', 'Has quiz?') %>
    </td>

    <td style='padding:5px' id='assignment_numbers_of_quiz_field' <%= 'hidden' unless @assignment_form.assignment.require_quiz %>>
      <%= label_tag('assignment_form[assignment][num_quiz_questions]', 'Number of Quiz questions:') %>
      <%= text_field_tag('assignment_form[assignment][num_quiz_questions]', @assignment_form.assignment.num_quiz_questions, { :style => 'width:20px'}) %>
    </td>
  </tr>

  <!--Badge-->
  <tr>
    <td style='padding:5px' id='assignment_has_badge_field'>
      <input name="assignment_form[assignment][has_badge]" type="hidden" value="false"/>
      <%= check_box_tag('assignment_form[assignment][has_badge]', 'true', @assignment_form.assignment.has_badge) %>
      <%= label_tag('assignment_form[assignment][has_badge]', 'Has badge?') %>
    </td>
  </tr>

  <!--staggered_deadline-->
  <tr>
    <td style='padding:5px' id='assignment_staggered_deadline_field'>
      <input name="assignment_form[assignment][staggered_deadline]" type="hidden" value="false"/>
      <%= check_box_tag('assignment_form[assignment][staggered_deadline]', 'true', @assignment_form.assignment.staggered_deadline, {:onChange => 'staggeredDeadlineChanged()'}) %>
      <%= label_tag('assignment_form[assignment][staggered_deadline]', 'Staggered deadline assignment?') %>
    </td>
  </tr>

  <tr>
    <td style='padding:5px' id='assignment_microtask_field'>
      <input name="assignment_form[assignment][microtask]" type="hidden" value="false"/>
      <%= check_box_tag('assignment_form[assignment][microtask]', 'true', @assignment_form.assignment.microtask, {:onchange => 'microtaskChanged()'}) %>
      <%= label_tag('assignment_form[assignment][microtask]', 'Micro-task assignment?') %>
    </td>
  </tr>

  <tr>
    <td style='padding:5px' id='assignment_review_visible_to_all_field'>
      <input name="assignment_form[assignment][reviews_visible_to_all]" type="hidden" value="false"/>
      <%= check_box_tag('assignment_form[assignment][reviews_visible_to_all]', 'true', @assignment_form.assignment.reviews_visible_to_all) %>
      <%= label_tag('assignment_form[assignment][reviews_visible_to_all]', 'Reviews visible to all other reviewers?') %>
    </td>
  </tr>

  <tr>
    <td style='padding:5px' id='assignment_is_calibrated_field'>
      <input name="assignment_form[assignment][is_calibrated]" type="hidden" value="false"/>
      <%= check_box_tag('assignment_form[assignment][is_calibrated]', 'true', @assignment_form.assignment.is_calibrated) %>
      <%= label_tag('assignment_form[assignment][is_calibrated]', 'Calibration for training?') %>
    </td>
  </tr>

  <tr>
    <td style='padding:5px' id='assignment_reputation_algorithm_field'>
      <div class="form-inline">
      <!--<input name="assignment_form[assignment][reputation_algorithm]" type="hidden" value="false"/>-->
      <%= label_tag('assignment_form[assignment][reputation_algorithm]', 'Reputation Algorithm?') %>
      <%= select('assignment_form[assignment]','reputation_algorithm', [['--', ''],['Lauw', 'Lauw'],['Hamer','Hamer']], {:selected => @assignment_form.assignment.reputation_algorithm}, {:class => 'form-control', :style => 'width: 100px'}) %>
      </div>
    </td>
  </tr>
  <tr colspan="3">
    <td style='padding:5px'>
      <input type="checkbox" name = "toggle_simicheck_setting" id="toggle_simicheck_setting" <%= "checked" if @assignment_form.assignment.simicheck != -1 %> onclick="useSimicheckChanged()"></input>
      <%= label_tag('toggle_simicheck_setting', 'Use simicheck?') %>
      <div style='padding:5px' id='assignment_simicheck_field' <%= "hidden" if @assignment_form.assignment.simicheck == -1 %> >
        <div class="form-inline">
          <%= label_tag('assignment_form[assignment][simicheck]', 'SimiCheck Delay') %>
          <%= select('assignment_form[assignment]', 'simicheck', (-1..100).to_a.map{|n| n== -1? ['No SimiCheck', -1] : [n, n]}, {:selected => @assignment_form.assignment.simicheck}, {:class => 'form-control', :style => 'width: 150px'}) %><b> hours</b>
          <br></br>
          <%= label_tag('assignment_form[assignment][simicheck_threshold]', 'SimiCheck Similarity Threshold') %>
          <%= select('assignment_form[assignment]', 'simicheck_threshold', (0..100).to_a.map{|n| n== 100? ['', 100]: [n, n]}, {:selected => @assignment_form.assignment.simicheck_threshold}, {:class => 'form-control', :style => 'width: 70px'}) %><b> %</b>
          <br>(Filter that refers to % text same between 2 docs)</br>
        </div>
      </div>
    </td>
  </tr>

  <!-- Start answer tagging code -->
  <tr>
    <td style='padding:5px' class="form-inline" colspan="2">
      <input name="assignment_form[assignment][is_answer_tagging_allowed]" type="hidden" value="false" onclick="useAnswerTagChanged()"/>
      <%= check_box_tag('assignment_form[assignment][is_answer_tagging_allowed]', 'true', @assignment_form.assignment.is_answer_tagging_allowed) %>
      <%= label_tag('assignment_form[assignment][is_answer_tagging_allowed]', 'Allow feedback comments to be tagged by the author?') %>
    </td>
  </tr>
  <!-- End answer tagging code -->

  <!--"available to student?" should be the last checkbox-->
  <tr>
    <td style='padding:5px' id='assignment_availability_flag_field'>
      <input name="assignment_form[assignment][availability_flag]" type="hidden" value="false"/>
      <%= check_box_tag('assignment_form[assignment][availability_flag]', 'true', @assignment_form.assignment.availability_flag) %>
      <%= label_tag('assignment_form[assignment][availability_flag]', 'Available to students?') %>
    </td>
  </tr>
</table>


<script>
    function hasTeamsChanged() {
      var msg = 'Warning! Unchecking this box will hide teams that already exist.';
        var checkbox = jQuery('#team_assignment');
        var team_count_field = jQuery('#assignment_team_count_field');
        var teammate_reviews_field = jQuery('#assignment_show_teammate_reviews');
        var team_formation_due_date_checkbox = jQuery('#team_formation_due_date_checkbox')

        jQuery("#questionnaire_table_TeammateReviewQuestionnaire").remove()
        if (checkbox.is(':checked')) {
          team_count_field.removeAttr('hidden');
          team_formation_due_date_checkbox.removeAttr('hidden')
          jQuery('#assignment_form_assignment_max_team_size').val('2');
          teammate_reviews_field.removeAttr('hidden');
          addDueDateTableElement(<%= @due_date_nameurl_not_empty==nil ? false:@due_date_nameurl_not_empty %>,'team_formation', 0,<%= due_date(@assignment_form.assignment, 'team_formation').to_json.html_safe %>);
          addQuestionnaireTableRow(
                  'TeammateReviewQuestionnaire',
                  null,
                  <%= questionnaire(@assignment_form.assignment, 'TeammateReviewQuestionnaire',nil).to_json.html_safe %>,
                  <%= assignment_questionnaire(@assignment_form.assignment, 'TeammateReviewQuestionnaire',nil).to_json.html_safe %>,
                  <%= questionnaire_options(@assignment_form.assignment, 'TeammateReviewQuestionnaire',nil).to_json.html_safe %>
          );

        } else {
            if (confirm(msg)) {
              team_count_field.attr('hidden', true);
              team_formation_due_date_checkbox.attr('hidden', true)
              teammate_reviews_field.attr('hidden', true);
              document.getElementById('assignment_form_assignment_max_team_size').value = '1';
              removeDueDateTableElement('team_formation', 0);

            } else {
              checkbox.prop('checked', true);
            }
            if (<%= @assignment_form.assignment.max_team_size == 1%>){
              team_count_field.attr('hidden', true);
            }
          } 
    }

    function staggeredDeadlineChanged() {
      var msg = 'Warning! Unchecking all topics for this assignment will now have the same deadline.'
      if (!jQuery('#assignment_staggered_deadline').is(':checked')) {
        if (!confirm(msg)) {
          jQuery('#assignment_staggered_deadline').prop('checked', true);
        }
      }
    }

   function reviewStrategyChanged() {
     var val = jQuery('#assignment_form_assignment_review_assignment_strategy').val();
        if (val == 'Auto-Selected') {
          jQuery('#assignment_review_topic_threshold_row').removeAttr('hidden');
          jQuery('#instructor_selected_review_mapping_mechanism').attr('hidden', true);
        } else {
          jQuery('#instructor_selected_review_mapping_mechanism').removeAttr('hidden');
          jQuery('#assignment_review_topic_threshold_row').attr('hidden', true);
        }
   }


    function hasQuizChanged() {
      if (jQuery('#assignment_form[assignment][require_quiz]').is(':checked')) {
        jQuery('#assignment_numbers_of_quiz_field').removeAttr('hidden');
      } else {
        jQuery('#assignment_numbers_of_quiz_field').attr('hidden', true);
      }
    }

    function useSimicheckChanged(){
      if (jQuery('#toggle_simicheck_setting').is(':checked')) {
        jQuery('#assignment_simicheck_field').show();
        jQuery('#assignment_simicheck_threshold').show();
      } else {
        jQuery('#assignment_simicheck_field').hide();
        jQuery('#assignment_simicheck_threshold').hide();
      }
    }

    jQuery(document).ready(function() {
      jQuery('input[type=radio][name=num_reviews]').change(function(){
        if (this.value == 'student'){
          jQuery('#num_reviews_per_student_threshold').removeAttr('hidden');
          jQuery('#num_reviews_per_submission_threshold').attr('hidden','hidden');
          jQuery('#calibrated_and_uncalibrated_artifacts_threshold').attr('hidden','hidden');
          jquery('#second_submit_tag').attr('disabled', 'disabled');
          jquery('#third_submit_tag').attr('disabled', 'disabled');
        } 
        else if(this.value == 'submission'){
          jQuery('#num_reviews_per_student_threshold').attr('hidden', 'hidden');
          jQuery('#num_reviews_per_submission_threshold').removeAttr('hidden');
          jQuery('#calibrated_and_uncalibrated_artifacts_threshold').attr('hidden','hidden');
          jquery('#first_submit_tag').attr('disabled', 'disabled');
          jquery('#third_submit_tag').attr('disabled', 'disabled');
        }
        else if(this.value == 'calibrated_and_uncalibrated'){
          jQuery('#num_reviews_per_student_threshold').attr('hidden', 'hidden');
          jQuery('#num_reviews_per_submission_threshold').attr('hidden', 'hidden');
          jQuery('#calibrated_and_uncalibrated_artifacts_threshold').removeAttr('hidden');
          jquery('#first_submit_tag').attr('disabled', 'disabled');
          jquery('#second_submit_tag').attr('disabled', 'disabled');
        }
      });
     jQuery('#first_submit_tag').add('#second_submit_tag').click(function(e){
       if(<%= @participants_count == 0 &&  @teams_count == 0 &&  @assignment_form.assignment.max_team_size > 1 %>) {
         alert('Please create participants and teams for this assignment before assigning reviewers.');
         e.preventDefault();
         e.stopPropagation();
       }
       else if(<%= @participants_count == 0 %>){
         alert('Please create participants for this assignment before assigning reviewers.');
         e.preventDefault();
         e.stopPropagation();
       }
       else if(<%= @teams_count == 0 %> && <%= @assignment_form.assignment.max_team_size > 1 %>){
         alert('Please create teams for this assignment before assigning reviewers.');
         e.preventDefault();
         e.stopPropagation();
       }
     });
    });
  </script>