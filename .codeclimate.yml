engines:
  rubocop:
    enabled: true
    checks:
      Rubocop/Metrics/ClassLength:
       enabled: false
      
      # invalid formatting for .codeclimate.yml -> must be in .rubocop.yml
      #Rubocop/Metrics/LineLength:
        #Max: 160

      # invalid formatting for .codeclimate.yml -> must be in .rubocop.yml
      #Rubocop/Metrics/ParameterLists:
        #Max: 9
     
    # This cop looks for use of the same name as outer local variables for block arguments or block local variables.
      Rubocop/Lint/ShadowingOuterLocalVariable:
        enabled: false

    # This cop checks for redundant uses of self.
    # If we enable this cop, many necessary selves will be deleted.
      Rubocop/Style/RedundantSelf:
        enabled: false
      
      Rubocop/Style/RedundantBegin:
        enabled: false

    # Adopt a consistent multi-line method chaining style. 
    # There are two popular styles in the Ruby community, both of which are considered good.
      Rubocop/Style/DotPosition:
        enabled: false

    # Single quotes being faster is hardly measurable and only affects parse time.
    # Enforcing double quotes reduces the times where you need to change them
    # when introducing an interpolation. Use single quotes only if their semantics
    # are needed.
      Rubocop/Style/StringLiterals:
        enabled: false

    # A specialized exception class will take one or more arguments and construct the message from it.
    # So both variants make sense. 
      Rubocop/Style/RaiseArgs:
        enabled: false

    # This cop checks the indentation of the right hand side operand in binary operations that span more than one line.
      Rubocop/Style/MultilineOperationIndentation:
        enabled: false

      Rubocop/Style/SpaceInsideBlockBraces:
      # The space here provides no real gain in readability while consuming
      # horizontal space that could be used for a better parameter name.
      # Also {| differentiates better from a hash than { | does.
        enabled: false

    # This cop checks for uses of rescue in its modifier form.
      Rubocop/Style/RescueModifier:
        enabled: false

    # The and and or keywords are banned. It's just not worth it. Always use && and || instead
      Rubocop/Style/AndOr:
        enabled: false

    # Enforcing the names of variables? To single letter ones? Just no.
      Rubocop/Style/SingleLineBlockParams:
        enabled: false

      Rubocop/Style/Documentation:
        enabled: false 

    # Style preference
      Rubocop/Style/MethodDefParentheses:
        enabled: false

    golint:
      enabled: true
    eslint:
      enabled: true
    csslint:
      enabled: true
    duplication:
      enabled: true
    config:
      languages:
      - ruby
        #mass_threshold: 30
      - javascript
ratings:
  paths:
  - app/**
  - lib/**
  - "**.rb"
exclude_paths:
- 'bin/**/*'
- 'config/**/*'
- 'db/**/*'
- 'lib/**/*'
- 'public/**/*'
- 'vendor/**/*'
